<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title>SSM实现注册登录的demo</title>
      <link href="/2018/11/29/SSM%E5%AE%9E%E7%8E%B0%E6%B3%A8%E5%86%8C%E7%99%BB%E5%BD%95%E7%9A%84demo/"/>
      <url>/2018/11/29/SSM%E5%AE%9E%E7%8E%B0%E6%B3%A8%E5%86%8C%E7%99%BB%E5%BD%95%E7%9A%84demo/</url>
      <content type="html"><![CDATA[<p>  记录一下在Eclipse中创建一个SSM的过程。</p><h2 id="搭建环境"><a href="#搭建环境" class="headerlink" title="搭建环境"></a>搭建环境</h2><h3 id="Java环境"><a href="#Java环境" class="headerlink" title="Java环境"></a>Java环境</h3><h4 id="安装JDK"><a href="#安装JDK" class="headerlink" title="安装JDK"></a>安装JDK</h4><p>  要使用Java语言进行开发，首先需要安装Java。在<a href="https://www.oracle.com/technetwork/java/javase/overview/index.html">官网</a> 下载JDK安装。<br>  注：注意区分JDK和JRE，前者是Java Development Kit，提供了Java的开发环境和运行环境，后者是Java Runtime Environment，只提供了运行环境。简单来说就是下图这样的关系：</p><p><img src="https://i.imgur.com/6c9toLm.jpg" alt="JDK和JRE"></p><h4 id="配置路径"><a href="#配置路径" class="headerlink" title="配置路径"></a>配置路径</h4><p>  右键<code>此电脑</code>选择<code>属性</code>，点击<code>高级系统设置</code>选择<code>环境变量</code>然后在<code>系统变量</code>下配置路径：</p><ol><li>新建变量名 JAVA_HOME 变量值：C:\Program Files\Java\jdk-11（替换成自己的jdk安装路径）</li><li>新建变量名 Path 变量值：C:\Program Files\Java\jdk-11\bin;C:\Program Files\Java\jdk-11\jre\bin。注意Win10下一定不要用相对路径%JAVA_HOME%来代替它的值，否则过后用的时候可能不稳定（找不到Java）。</li><li>配置完毕后在命令行（Win+R后输入<code>cmd</code>回车）输入<code>java -version</code>查看版本信息，如果提示版本信息则安装成功。<h3 id="Eclipse、Tomcat、MySQL、springsource-tool-suite和（Maven）"><a href="#Eclipse、Tomcat、MySQL、springsource-tool-suite和（Maven）" class="headerlink" title="Eclipse、Tomcat、MySQL、springsource-tool-suite和（Maven）"></a>Eclipse、Tomcat、MySQL、springsource-tool-suite和（Maven）</h3></li><li>安装配置Eclipse<br>在<a href="https://www.eclipse.org/downloads/">Eclipse官网</a>下载Eclipse按提示安装即可。需要设置Java的时候就添加之前安装好的Java。<a href="http://www.cnblogs.com/wlxslsb/p/10034125.html">参考博客</a>。</li><li>安装配置Tomcat<a href="http://www.cnblogs.com/houshiwu/p/10016748.html">参考链接</a></li><li>安装配置MySQL<a href="https://www.cnblogs.com/SamWeb/p/7922490.html">参考链接</a><br><em>完成过后可安装一个简单的数据库工具SQLyog方便操作数据库</em></li><li>安装springsource-tool-suite<br><a href="https://blog.csdn.net/csdnsjg/article/details/80152815">参考博客</a></li><li>安装配置Maven<ol><li>在<a href="http://maven.apache.org/download.cgi">官网下载</a>maven； 配置环境变量：</li><li>新建变量名：MAVEN_HOME  变量值：D:\server\apache-maven-3.2.1（这是我的MAVEN路径）</li><li>编辑变量名：Path  在最前面加上：D:\server\apache-maven-3.2.1\bin;（注意，最后要有个”;”作为分隔符）</li><li>检查安装：按命令行输入mvn -version看是否提示版本信息，如果提示则安装成功。</li></ol></li></ol><hr><h2 id="SSM"><a href="#SSM" class="headerlink" title="SSM"></a>SSM</h2><h3 id="SSM简介"><a href="#SSM简介" class="headerlink" title="SSM简介"></a>SSM简介</h3><p>  SSM指的是Spring+SpringMVC+Mybatis整合的框架。Spring依赖注入DI来管理各层的组件，使用面向切面编程AOP管理事物、日志、权限等。SpringMVC代表了Model(模型)View(视图)Controller(控制)接收外部请求,进行分发和处理。Mybatis是基于jdbc的框架,主要用来操作数据库,并且将业务实体和数据表联系起来。<br>  服务器发送Http request请求，请求被前端控制器（DispatcherServlet）捕获。<br>前端控制器根据xml文件中的配置（或者注解）对请求的URL进行解析，得到请求资源标识符（URI）。然后根据该URI，调用处理器映射器（HandlerMapping）获得处理该请求的Handler以及Handler对应的拦截器，最后以 HandlerExecutionChain 对象的形式返回。前端控制器根据获得的Handler，选择一个合适的处理器适配器（HandlerAdapter）去执行该Handler。处理器适配器提取request中的模型数据，填充Handler入参，执行处理器（Handler）（也称之为Controller）。Handler(Controller)执行完成后，向处理器适配器返回一个ModelAndView对象，处理器适配器再向前端控制器返回该ModelAndView对象（ModelAndView只是一个逻辑视图）。<br>根据返回的ModelAndView，前端控制器请求一个适合的视图解析器（ViewResolver）（必须是已经注册到Spring容器中的ViewResolver）去进行视图解析，然后视图解析器向前端控制器返回一个真正的视图View（jsp）。<br>  前端控制器通过Model解析出ModelAndView中的参数进行解析，最终展现出完整的View并通过Http response返回给客户端。（图片来自<a href="https://blog.csdn.net/qq_42111742/article/details/80922367">CSDN博客</a>）<br><img src="https://i.imgur.com/Cle6v1x.png" alt="请求处理流程"></p><h3 id="整合Spring-SpringMVC-MyBatis框架"><a href="#整合Spring-SpringMVC-MyBatis框架" class="headerlink" title="整合Spring+SpringMVC+MyBatis框架"></a>整合Spring+SpringMVC+MyBatis框架</h3><h5 id="创建一个Project"><a href="#创建一个Project" class="headerlink" title="创建一个Project"></a>创建一个Project</h5><ol><li>点击“file”  </li><li>选择“new”  </li><li>点击“Project”  </li><li>在”Wizards”中输入“maven”选择“maven project”点击“next”  </li><li>新窗口选择workspace（这个project放在哪里）选择好后next  </li><li>选择“maven-archetype-webapp”后点击next  </li><li>输入项目信息都可以随便填，但是为了方便查找，Group id填自己的主页网址倒写比如个人首页是chaoxz2.github.io，那么这一项我就填io.github.chaoxz2。下一项Artifact id就填写项目名称，其他不用改，点击“finish”。    <h5 id="修改一些配置"><a href="#修改一些配置" class="headerlink" title="修改一些配置"></a>修改一些配置</h5></li></ol><ul><li>在右边的Explorer栏点击倒三角形（鼠标悬停会提示View Menu），取消掉“.*resoureces”的勾选点确定。</li></ul><ul><li>现在Explorer栏中该项目下就有了”.setting”文件夹，在该文件夹下打开“org.eclipse.wst.common.component”文件，修改project-version=”1.5.0”为project-version=”1.6”</li></ul><ul><li>打开“org.eclipse.wst.common.project.facet.core.xml”将<installed facet="jst.web" version="2.3"/>中的version值修改为3.0。</li></ul><ul><li>打开/helloworld（我的项目名）/src/main/webapp/WEB-INF下的web.xml文件，更改文件头。改为    </li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="php"><span class="meta">&lt;?</span>xml version=<span class="string">"1.0"</span> encoding=<span class="string">"UTF-8"</span><span class="meta">?&gt;</span></span>  </span><br><span class="line"><span class="tag">&lt;<span class="name">web-app</span> <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span>  </span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns</span>=<span class="string">"http://java.sun.com/xml/ns/javaee"</span>  </span></span><br><span class="line"><span class="tag">    <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-app_3_0.xsd"</span>  </span></span><br><span class="line"><span class="tag">    <span class="attr">version</span>=<span class="string">"3.0"</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">display-name</span>&gt;</span>Archetype Created Web Application<span class="tag">&lt;/<span class="name">display-name</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>然后保存，右键项目名选择“properties”，再选择Project Facets,查看Java版本是否1.8和Dynamic Web Module是否为3.0然后apply and close。按Alt+F5刷新。这个项目初步设置就算完成了。（不报错） </li><li>properties设置。右键点击项目名，依次选择“properties”“Java build path”在libraries里点击“Add Library” 选择“Server Runtime”添加Tomcat服务器。<h5 id="添加依赖"><a href="#添加依赖" class="headerlink" title="添加依赖"></a>添加依赖</h5>在demo0的项目视图里打开pom.xml文件引入依赖:</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 依赖 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.8.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">      <span class="comment">&lt;!-- 表示开发的时候引入发布的时候不会加载 --&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- spring核心包 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.0.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-beans<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.0.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.0.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-webmvc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.0.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-oxm<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.0.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-context<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.0.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.0.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-jdbc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.0.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-context-support<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.0.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-aop<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.0.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- mybatis核心包 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>3.4.6<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- mybatis-spring --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-spring<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.3.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- java ee --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>javaee-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>7.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 导入Mysql数据库链接jar包 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>8.0.11<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 导入dbcp的jar包，用来在applicationContext.xml中配置数据库 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>commons-dbcp<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-dbcp<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>1.4<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- JSTL标签类 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>jstl<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jstl<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 日志文件管理包 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- log start --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>log4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>log4j<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.12<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 格式化对象，方便输出日志 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>fastjson<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.7<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.slf4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>slf4j-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>1.7.25<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.slf4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>slf4j-log4j12<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>1.7.25<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- log end --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 输入json --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.fasterxml.jackson.core<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jackson-databind<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.9.5<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">finalName</span>&gt;</span>demo0<span class="tag">&lt;/<span class="name">finalName</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure><h5 id="编写配置文件"><a href="#编写配置文件" class="headerlink" title="编写配置文件"></a>编写配置文件</h5><p>在src/main/resources下新建四个文件：<br>第一个:<strong>jdbc.properties</strong>用于配置连接池参数</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">jdbc.<span class="attribute">driver</span>=com.mysql.cj.jdbc.Driver</span><br><span class="line">jdbc.<span class="attribute">url</span>=jdbc:mysql://localhost:3306/logintest?useUnicode=true&amp;characterEncoding=UTF-8&amp;useSSL=false&amp;autoReconnect=true&amp;failOverReadOnly=false</span><br><span class="line"><span class="comment">#数据库用户名</span></span><br><span class="line">jdbc.<span class="attribute">username</span>=root</span><br><span class="line"><span class="comment">#数据库密码</span></span><br><span class="line">jdbc.<span class="attribute">password</span>=root</span><br><span class="line"><span class="comment">#定义初始连接数  </span></span><br><span class="line"><span class="attribute">initialSize</span>=0  </span><br><span class="line"><span class="comment">#定义最大连接数  </span></span><br><span class="line"><span class="attribute">maxActive</span>=20  </span><br><span class="line"><span class="comment">#定义最大空闲数  </span></span><br><span class="line"><span class="attribute">maxIdle</span>=20  </span><br><span class="line"><span class="comment">#定义最小空闲数  </span></span><br><span class="line"><span class="attribute">minIdle</span>=1  </span><br><span class="line"><span class="comment">#定义最长等待时间  </span></span><br><span class="line"><span class="attribute">maxWait</span>=60000</span><br></pre></td></tr></table></figure><p>这部分可配置的参数取决于使用的连接池类型（此处使用DBCP）<br>jdbc.driver部分注意根据安装的MySQL版本的不同配置不同的驱动：<br>com.mysql.jdbc.Driver 是 mysql-connector-java 5中的;<br>com.mysql.cj.jdbc.Driver 是 mysql-connector-java 6中的。<br>jdbc.url部分，可能出现时区问题编码问题等等问好过后的都是设置这些额外的东西的。（一般数据库连接出错都是这里的问题）</p><p>第二个<strong>log4j.properties</strong>用于配置日志相关参数</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">log4j.rootLogger=INFO,Console,File  </span><br><span class="line"><span class="section">#定义日志输出目的地为控制台  </span></span><br><span class="line">log4j.appender.Console=org.apache.log4j.ConsoleAppender  </span><br><span class="line">log4j.appender.Console.Target=System.out  </span><br><span class="line"><span class="section">#可以灵活地指定日志输出格式，下面一行是指定具体的格式  </span></span><br><span class="line">log4j.appender.Console.layout = org.apache.log4j.PatternLayout  </span><br><span class="line">log4j.appender.Console.layout.ConversionPattern=[%c] - %m%n  </span><br><span class="line">  </span><br><span class="line"><span class="section">#文件大小到达指定尺寸的时候产生一个新的文件  </span></span><br><span class="line">log4j.appender.File = org.apache.log4j.RollingFileAppender  </span><br><span class="line"><span class="section">#指定输出目录  </span></span><br><span class="line">log4j.appender.File.File = logs/ssm.log  </span><br><span class="line"><span class="section">#定义文件最大大小  </span></span><br><span class="line">log4j.appender.File.MaxFileSize = 10MB  </span><br><span class="line"><span class="section"># 输出所以日志，如果换成DEBUG表示输出DEBUG以上级别日志  </span></span><br><span class="line">log4j.appender.File.Threshold = ALL  </span><br><span class="line">log4j.appender.File.layout = org.apache.log4j.PatternLayout  </span><br><span class="line">log4j.appender.File.layout.ConversionPattern =[<span class="string">%p</span>] [<span class="string">%d&#123;yyyy-MM-dd HH\:mm\:ss&#125;</span>][<span class="symbol">%c</span>]%m%n</span><br></pre></td></tr></table></figure><p>第三个<strong>spring-mvc.xml</strong>用于配置SpringMVC相关设置</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 自动扫描该包，使springMVC认为包下使用了@Controller注解的类时控制器 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">"com.ssm.controller"</span>/&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 扩充了注解驱动，可以将请求参数绑定到控制器参数 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mvc:annotation-driven</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 避免IE执行AJAX时，返回JSON出现下载文件 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"mappingJacksonHttpMessageConverter"</span></span></span><br><span class="line"><span class="tag"><span class="attr">class</span>=<span class="string">"org.springframework.http.converter.json.MappingJackson2HttpMessageConverter"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"supportedMediaTypes"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">list</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">value</span>&gt;</span>test/html;charset=UTF-8<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">list</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 启动springMVC的注解功能，完成请求和注解POJO的映射 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span></span></span><br><span class="line"><span class="tag"><span class="attr">class</span>=<span class="string">"org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"messageConverters"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">list</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ref</span> <span class="attr">bean</span>=<span class="string">"mappingJacksonHttpMessageConverter"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">list</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 配置ViewResolver 。可用多个ViewResolver 。使用order属性排序。   InternalResourceViewResolver 放在最后 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!--定义跳转文件的前后缀，试图模式配置 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span></span></span><br><span class="line"><span class="tag">        <span class="attr">class</span>=<span class="string">"org.springframework.web.servlet.view.InternalResourceViewResolver"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"prefix"</span> <span class="attr">value</span>=<span class="string">"/WEB-INF/jsp/"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"suffix"</span> <span class="attr">value</span>=<span class="string">".jsp"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><p>第四个<strong>spring-mybatis.xml</strong>用于配置Spring和Mybatis</p><figure class="highlight dust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="xml"><span class="comment">&lt;!-- 自动扫描 --&gt;</span>  </span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">"com.ssm"</span> /&gt;</span>  </span></span><br><span class="line"><span class="xml">    </span></span><br><span class="line"><span class="xml">    <span class="comment">&lt;!-- 引入配置文件 --&gt;</span>  </span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"propertyConfigurer"</span>  </span></span></span><br><span class="line"><span class="xml">        class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer"&gt;  </span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"location"</span> <span class="attr">value</span>=<span class="string">"classpath:jdbc.properties"</span> /&gt;</span>  </span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span>  </span></span><br><span class="line"><span class="xml">  </span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"dataSource"</span> <span class="attr">class</span>=<span class="string">"org.apache.commons.dbcp.BasicDataSource"</span>  </span></span></span><br><span class="line"><span class="xml">        destroy-method="close"&gt;  </span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"driverClassName"</span> <span class="attr">value</span>=<span class="string">"$</span></span></span><span class="template-variable">&#123;jdbc.driver&#125;</span><span class="xml"><span class="tag"><span class="string">"</span> /&gt;</span>  </span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"url"</span> <span class="attr">value</span>=<span class="string">"$</span></span></span><span class="template-variable">&#123;jdbc.url&#125;</span><span class="xml"><span class="tag"><span class="string">"</span> /&gt;</span>  </span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"username"</span> <span class="attr">value</span>=<span class="string">"$</span></span></span><span class="template-variable">&#123;jdbc.username&#125;</span><span class="xml"><span class="tag"><span class="string">"</span> /&gt;</span>  </span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">value</span>=<span class="string">"$</span></span></span><span class="template-variable">&#123;jdbc.password&#125;</span><span class="xml"><span class="tag"><span class="string">"</span> /&gt;</span>  </span></span><br><span class="line"><span class="xml">        <span class="comment">&lt;!-- 初始化连接大小 --&gt;</span>  </span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"initialSize"</span> <span class="attr">value</span>=<span class="string">"$</span></span></span><span class="template-variable">&#123;initialSize&#125;</span><span class="xml"><span class="tag"><span class="string">"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span>  </span></span><br><span class="line"><span class="xml">        <span class="comment">&lt;!-- 连接池最大数量 --&gt;</span>  </span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"maxActive"</span> <span class="attr">value</span>=<span class="string">"$</span></span></span><span class="template-variable">&#123;maxActive&#125;</span><span class="xml"><span class="tag"><span class="string">"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span>  </span></span><br><span class="line"><span class="xml">        <span class="comment">&lt;!-- 连接池最大空闲 --&gt;</span>  </span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"maxIdle"</span> <span class="attr">value</span>=<span class="string">"$</span></span></span><span class="template-variable">&#123;maxIdle&#125;</span><span class="xml"><span class="tag"><span class="string">"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span>  </span></span><br><span class="line"><span class="xml">        <span class="comment">&lt;!-- 连接池最小空闲 --&gt;</span>  </span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"minIdle"</span> <span class="attr">value</span>=<span class="string">"$</span></span></span><span class="template-variable">&#123;minIdle&#125;</span><span class="xml"><span class="tag"><span class="string">"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span>  </span></span><br><span class="line"><span class="xml">        <span class="comment">&lt;!-- 获取连接最大等待时间 --&gt;</span>  </span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"maxWait"</span> <span class="attr">value</span>=<span class="string">"$</span></span></span><span class="template-variable">&#123;maxWait&#125;</span><span class="xml"><span class="tag"><span class="string">"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span>  </span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span>  </span></span><br><span class="line"><span class="xml">  </span></span><br><span class="line"><span class="xml">    <span class="comment">&lt;!-- spring和MyBatis完美整合，不需要mybatis的配置映射文件 --&gt;</span>  </span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"sqlSessionFactory"</span> <span class="attr">class</span>=<span class="string">"org.mybatis.spring.SqlSessionFactoryBean"</span>&gt;</span>  </span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"dataSource"</span> <span class="attr">ref</span>=<span class="string">"dataSource"</span> /&gt;</span>  </span></span><br><span class="line"><span class="xml">        <span class="comment">&lt;!-- 自动扫描mapping.xml文件 --&gt;</span>  </span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"mapperLocations"</span> <span class="attr">value</span>=<span class="string">"classpath:com/ssm/dao/IUserDao.xml"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span>  </span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span>  </span></span><br><span class="line"><span class="xml">  </span></span><br><span class="line"><span class="xml">    <span class="comment">&lt;!-- DAO接口所在包名，Spring会自动查找其下的类 --&gt;</span>  </span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.mybatis.spring.mapper.MapperScannerConfigurer"</span>&gt;</span>  </span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"basePackage"</span> <span class="attr">value</span>=<span class="string">"com.ssm.dao"</span> /&gt;</span>  </span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"sqlSessionFactoryBeanName"</span> <span class="attr">value</span>=<span class="string">"sqlSessionFactory"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span>  </span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span>  </span></span><br><span class="line"><span class="xml">  </span></span><br><span class="line"><span class="xml">    <span class="comment">&lt;!-- (事务管理)transaction manager, use JtaTransactionManager for global tx --&gt;</span>  </span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"transactionManager"</span>  </span></span></span><br><span class="line"><span class="xml">        class="org.springframework.jdbc.datasource.DataSourceTransactionManager"&gt;  </span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"dataSource"</span> <span class="attr">ref</span>=<span class="string">"dataSource"</span> /&gt;</span>  </span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span></span><br></pre></td></tr></table></figure><hr><h2 id="项目开始"><a href="#项目开始" class="headerlink" title="项目开始"></a>项目开始</h2><h3 id="分析需求"><a href="#分析需求" class="headerlink" title="分析需求"></a>分析需求</h3><p>我们需要实现的是注册登录修改信息，那么需要一个实体类User，需要服务“注册”“登录”“修改信息”。  </p><table><thead><tr><th>用户操作</th><th>Service名称</th><th>对应的数据库操作（Dao操作）</th><th>参数</th></tr></thead><tbody><tr><td>注册</td><td>register</td><td>插入用户到表user</td><td>User（全部注册信息）</td></tr><tr><td>登录</td><td>login</td><td>在表user中查找用户</td><td>User（包含邮箱和密码）</td></tr><tr><td>修改信息</td><td>updateUser</td><td>更新user</td><td>User（id）</td></tr></tbody></table><h3 id="数据库建模"><a href="#数据库建模" class="headerlink" title="数据库建模"></a>数据库建模</h3><p>对于用户，需要用id用于区分，通过邮箱注册需要字段邮箱，还需要有密码用于登录，最后还可以有一个昵称。所以user表内容如下：</p><table><thead><tr><th>列名</th><th>数据类型</th><th>长度</th></tr></thead><tbody><tr><td>id</td><td>BIGINT</td><td>20</td></tr><tr><td>email</td><td>VARCHAR</td><td>25</td></tr><tr><td>name</td><td>VARCHAR</td><td>25</td></tr><tr><td>password</td><td>VARCHAR</td><td>25</td></tr></tbody></table><p>此外id还应作为主键，非空，自增。</p><h3 id="开始主要工作"><a href="#开始主要工作" class="headerlink" title="开始主要工作"></a>开始主要工作</h3><ol><li>顺序选择<br>我们究竟该以什么顺序开始编写Java文件呢，从Entity到Dao到Service到Controller，还是刚好相反呢？<br>对于这个简单的项目，以相反顺序能够减少Dao的编写工作量，只需要编写少量几个必须的方法即可。在我们使用未创建的Service和Dao时，Eclipse回提醒我们不存在，我们只需要点点鼠标创建就行，这样也能保证做的工作最少。</li><li>Controller<br>controller实现数据和视图的交互，用户发起一次请求，controller调用对应的方法，在方法里和数据库交互，然后返回视图和数据。<br>从用户角度来说，需要实现的效果是：<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">打开首页（Ⅰ）时，出现登录框和注册选项；</span><br><span class="line">点击“注册”按钮跳转到注册页面（Ⅱ）；</span><br><span class="line">在注册页面（Ⅱ）注册失败，返回注册页面（Ⅱ）；</span><br><span class="line">在注册页面（Ⅱ）注册成功，返回首页（Ⅰ）；</span><br><span class="line">在首页（Ⅰ）输入账号密码，登陆失败返回首页（Ⅰ）；</span><br><span class="line">在首页（Ⅰ）输入账号密码，登陆成功则跳转到个人信息页面（ⅲ）；</span><br><span class="line">在个人信息页面（ⅲ）点击“修改”跳转至修改个人信息页面（Ⅳ）；</span><br><span class="line">修改完成（无论成功失败），都跳转至个人信息页面（ⅲ）；</span><br><span class="line">点击个人信息页面（ⅲ）的“退出登录”后跳转至首页。</span><br></pre></td></tr></table></figure></li></ol><p>总共四个页面，对应需要controller做出的响应有：</p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">在首页提交账号密码信息后，判断登录成功还是失败，返回相应数据和页面；（<span class="selector-tag">userLogin</span>）</span><br><span class="line">点击“注册”按钮后返回注册页面；(register)</span><br><span class="line">在注册页面点击“验证邮箱是否可用”按钮后返回是否可用；（<span class="selector-tag">checkEmail</span>）</span><br><span class="line">在注册页面提交注册信息后判断注册成功或者失败，返回相应页面；(userRegister)</span><br><span class="line">在个人信息页面，点击修改个人信息后返回修改个人信息页面；(update)</span><br><span class="line">提交修改信息后返回个人信息页面；(userUpdate)</span><br></pre></td></tr></table></figure><p>所以Controller设计如下：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.ssm.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpSession;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Controller;</span><br><span class="line"><span class="keyword">import</span> org.springframework.ui.Model;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.ModelAttribute;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMethod;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.ResponseBody;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.mysql.cj.util.StringUtils;</span><br><span class="line"><span class="keyword">import</span> com.ssm.entity.User;</span><br><span class="line"><span class="keyword">import</span> com.ssm.service.IUserService;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserController</span> </span>&#123;</span><br><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> IUserService userservice;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 页面跳转</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//到注册页面</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(value=<span class="string">"register"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">toRegister</span><span class="params">(HttpServletRequest request)</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">"register"</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//到登录页面</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(value = <span class="string">"login"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toLogin</span><span class="params">(HttpServletRequest request)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"redirect:/login.jsp"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">//到个人信息页面</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(value=<span class="string">"userinfo"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">toMyinfo</span><span class="params">(HttpSession session,Model model,@ModelAttribute User user)</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">"userinfo"</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//到更新信息页面</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(value=<span class="string">"update"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">toUpdate</span><span class="params">(HttpServletRequest request)</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">"update"</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//退出登录，注销账户</span></span><br><span class="line">    <span class="meta">@RequestMapping</span>(value = <span class="string">"UserLogout"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">logout</span><span class="params">(HttpSession session)</span> </span>&#123;</span><br><span class="line">        session.invalidate();</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"redirect:/login.jsp"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * 方法</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//检查邮箱是否被注册</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(value=<span class="string">"checkEmail"</span>,method = RequestMethod.POST)</span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Map&lt;String,Object&gt; <span class="title">checkEmail</span><span class="params">(String email)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(StringUtils.isNullOrEmpty(email))&#123;</span><br><span class="line">            System.out.println(<span class="string">"用户名不能为空!"</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="string">"redirect:/login.jsp"</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        Map&lt;String,Object&gt; resultMap = <span class="keyword">new</span> HashMap&lt;String, Object&gt;(); </span><br><span class="line">        User user0=<span class="keyword">null</span>;</span><br><span class="line">        user0 = userservice.registerCheck(email); </span><br><span class="line">        <span class="keyword">if</span>(user0 == <span class="keyword">null</span>)&#123;</span><br><span class="line">            resultMap.put(<span class="string">"result"</span>, <span class="string">"success"</span>);</span><br><span class="line">            <span class="keyword">return</span> resultMap;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            resultMap.put(<span class="string">"result"</span>, <span class="string">"notsuccess"</span>);</span><br><span class="line">            <span class="keyword">return</span> resultMap;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//注册（在检查邮箱是否被注册中已经实现了这里的部分功能，相应部分可删去）</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(value=<span class="string">"userRegister"</span>,method = RequestMethod.POST)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">userRegister</span><span class="params">(@ModelAttribute User user)</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(userservice.registerCheck(user.getEmail())==<span class="keyword">null</span>) &#123;</span><br><span class="line">userservice.registerUser(user);</span><br><span class="line"><span class="comment">//注册成功</span></span><br><span class="line">System.out.println(<span class="string">"注册成功返回登陆页"</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="string">"redirect:/login.jsp"</span>;</span><br><span class="line">&#125;<span class="keyword">else</span> &#123;</span><br><span class="line"><span class="comment">//用户已存在</span></span><br><span class="line">System.out.println(<span class="string">"注册失败返回注册页"</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="string">"register"</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;<span class="keyword">catch</span>(Exception e) &#123;</span><br><span class="line">System.out.println(<span class="string">"出现错误，重新注册"</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="string">"register"</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//登录</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(value = <span class="string">"userLogin"</span>,method = RequestMethod.POST)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">userLogin</span><span class="params">(HttpSession session,@ModelAttribute User user)</span><span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">User user0=userservice.loginUser(user);</span><br><span class="line"><span class="keyword">if</span>(user0!=<span class="keyword">null</span>) &#123;</span><br><span class="line"><span class="comment">//将用户保存在session里面</span></span><br><span class="line"> session.setAttribute(<span class="string">"user"</span>,user0);</span><br><span class="line">             <span class="keyword">return</span> <span class="string">"userinfo"</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line"><span class="comment">//邮箱或者密码错误</span></span><br><span class="line"><span class="keyword">return</span> <span class="string">"redirect:/login.jsp"</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;<span class="keyword">catch</span>(Exception e) &#123;</span><br><span class="line">System.out.println(<span class="string">"出现错误，返回登陆页"</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="string">"redirect:/login.jsp"</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//更新</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(value=<span class="string">"userUpdate"</span>,method = RequestMethod.POST)</span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Map&lt;String,Object&gt;  <span class="title">updateUser</span><span class="params">(HttpSession session,@ModelAttribute User user)</span><span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">userservice.updateUser(user);</span><br><span class="line">Map&lt;String,Object&gt; resultMap = <span class="keyword">new</span> HashMap&lt;String, Object&gt;();</span><br><span class="line"><span class="keyword">if</span>(!user.equals(session.getAttribute(<span class="string">"user"</span>))) &#123;<span class="comment">//此处是判断新User是否和session中的User一样</span></span><br><span class="line"><span class="comment">//更新成功</span></span><br><span class="line">session.setAttribute(<span class="string">"user"</span>, user);</span><br><span class="line">System.out.println(<span class="string">"更新成功"</span>);</span><br><span class="line">resultMap.put(<span class="string">"result"</span>, <span class="string">"success"</span>);</span><br><span class="line">            <span class="keyword">return</span> resultMap;</span><br><span class="line">&#125;<span class="keyword">else</span> &#123;</span><br><span class="line">resultMap.put(<span class="string">"result"</span>, <span class="string">"notsuccess"</span>);</span><br><span class="line">            <span class="keyword">return</span> resultMap;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>相应的，新建controller里提到过的jsp文件和使用到的service方法。</p><ol start="3"><li>Service<br>Service一般是创建一个Service接口，再创建它的实现类，刚刚在controller里“@Autowired”的就是一个接口。由Eclipse提醒我们创建的也是接口和抽象方法，不需要再更改，下面编写其实现类。</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.ssm.service.impl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.ssm.dao.IUserDao;</span><br><span class="line"><span class="keyword">import</span> com.ssm.entity.User;</span><br><span class="line"><span class="keyword">import</span> com.ssm.service.IUserService;</span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserServiceImpl</span> <span class="keyword">implements</span> <span class="title">IUserService</span></span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> IUserDao userdao;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> User <span class="title">registerCheck</span><span class="params">(String email)</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> userdao.findUserByEmail(email);</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> User <span class="title">registerUser</span><span class="params">(User user)</span> </span>&#123;</span><br><span class="line">userdao.addUserByEmail(user);</span><br><span class="line"><span class="keyword">return</span> userdao.findUserByEmailAndPassword(user);</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> User <span class="title">loginUser</span><span class="params">(User user)</span> </span>&#123;</span><br><span class="line">User user0=userdao.findUserByEmailAndPassword(user);</span><br><span class="line"><span class="keyword">if</span>(user0==<span class="keyword">null</span>)</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="keyword">return</span> user0;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">updateUser</span><span class="params">(User user)</span> </span>&#123;</span><br><span class="line">userdao.updateUser(user);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这一步我们又会创建Dao接口，下一步编写对应的xml文件。</p><ol start="4"><li>Dao<br>这里的Dao其实只需要编写xml文件即可，对应的Java文件在上一步中已经生成，注意两个文件名相同。</li></ol><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=<span class="string">"1.0"</span> encoding=<span class="string">"UTF-8"</span>?&gt;</span><br><span class="line">&lt;!DOCTYPE mapper</span><br><span class="line">    PUBLIC <span class="string">"-//mybatis.org//DTD Mapper 3.0//EN"</span></span><br><span class="line">    <span class="string">"http://mybatis.org/dtd/mybatis-3-mapper.dtd"</span>&gt;</span><br><span class="line">&lt;mapper namespace=<span class="string">"com.ssm.dao.IUserDao"</span>&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- 查看邮箱是否已经注册 --&gt;</span><br><span class="line">    &lt;select id=<span class="string">"findUserByEmail"</span> resultType=<span class="string">"com.ssm.entity.User"</span> parameterType=<span class="string">"String"</span> &gt;</span><br><span class="line">        select </span><br><span class="line">        *from</span><br><span class="line">user </span><br><span class="line">where </span><br><span class="line">email=#&#123;email&#125;</span><br><span class="line">    &lt;/select&gt;</span><br><span class="line">    </span><br><span class="line">    &lt;!-- （通过邮箱）登录 --&gt;</span><br><span class="line">    &lt;select id=<span class="string">"findUserByEmailAndPassword"</span> resultType=<span class="string">"com.ssm.entity.User"</span> parameterType=<span class="string">"com.ssm.entity.User"</span>&gt;</span><br><span class="line">    select</span><br><span class="line">    *from</span><br><span class="line">    user</span><br><span class="line">    where</span><br><span class="line">    email=#&#123;email&#125; and password=#&#123;password&#125;</span><br><span class="line">    &lt;/select&gt;</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    &lt;!-- （用邮箱）注册 --&gt;</span><br><span class="line">    &lt;insert id=<span class="string">"addUserByEmail"</span> parameterType=<span class="string">"com.ssm.entity.User"</span>&gt;</span><br><span class="line">    insert into</span><br><span class="line">    user</span><br><span class="line">&lt;trim prefix=<span class="string">"("</span> suffix=<span class="string">")"</span> suffixOverrides=<span class="string">","</span> &gt;</span><br><span class="line">      &lt;<span class="keyword">if</span> test=<span class="string">"name != null"</span> &gt;</span><br><span class="line">        name,</span><br><span class="line">      &lt;/if&gt;</span><br><span class="line">      &lt;<span class="keyword">if</span> test=<span class="string">"password != null"</span> &gt;</span><br><span class="line">        password,</span><br><span class="line">      &lt;/if&gt;</span><br><span class="line">      &lt;<span class="keyword">if</span> test=<span class="string">"email != null"</span> &gt;</span><br><span class="line">        email,</span><br><span class="line">      &lt;/if&gt;</span><br><span class="line">    &lt;/trim&gt;</span><br><span class="line">    &lt;trim prefix=<span class="string">"values ("</span> suffix=<span class="string">")"</span> suffixOverrides=<span class="string">","</span> &gt;</span><br><span class="line">      &lt;<span class="keyword">if</span> test=<span class="string">"name != null"</span> &gt;</span><br><span class="line">        #&#123;name,jdbcType=VARCHAR&#125;,</span><br><span class="line">      &lt;/if&gt;</span><br><span class="line">      &lt;<span class="keyword">if</span> test=<span class="string">"password != null"</span> &gt;</span><br><span class="line">        #&#123;password,jdbcType=VARCHAR&#125;,</span><br><span class="line">      &lt;/if&gt;</span><br><span class="line">      &lt;<span class="keyword">if</span> test=<span class="string">"email != null"</span> &gt;</span><br><span class="line">        #&#123;email,jdbcType=VARCHAR&#125;,</span><br><span class="line">      &lt;/if&gt;</span><br><span class="line">    &lt;/trim&gt;</span><br><span class="line">    &lt;/insert&gt;</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    &lt;!-- 更改用户信息 --&gt;</span><br><span class="line">   &lt;update id=<span class="string">"updateUser"</span>  parameterType=<span class="string">"com.ssm.entity.User"</span> &gt;</span><br><span class="line">    update user</span><br><span class="line">    &lt;set &gt;</span><br><span class="line">      &lt;<span class="keyword">if</span> test=<span class="string">"password != null"</span> &gt;</span><br><span class="line">        password = #&#123;password,jdbcType=VARCHAR&#125;,</span><br><span class="line">      &lt;/if&gt;</span><br><span class="line">      &lt;<span class="keyword">if</span> test=<span class="string">"name != null"</span> &gt;</span><br><span class="line">        name = #&#123;name,jdbcType=VARCHAR&#125;,</span><br><span class="line">      &lt;/if&gt;</span><br><span class="line">      &lt;<span class="keyword">if</span> test=<span class="string">"email != null"</span> &gt;</span><br><span class="line">        email = #&#123;email,jdbcType=VARCHAR&#125;,</span><br><span class="line">      &lt;/if&gt;</span><br><span class="line">    &lt;/set&gt;</span><br><span class="line">    where id = #&#123;id,jdbcType=BIGINT&#125;</span><br><span class="line">  &lt;/update&gt;</span><br><span class="line">&lt;/mapper&gt;</span><br></pre></td></tr></table></figure><ol start="5"><li>Entity<br>实体类只需要按照数据库设计好的字段设计即可：</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.ssm.entity;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line"><span class="keyword">private</span> Long id;</span><br><span class="line"><span class="keyword">private</span> String email;</span><br><span class="line"><span class="keyword">private</span> String name;</span><br><span class="line"><span class="keyword">private</span> String password;</span><br><span class="line"><span class="function"><span class="keyword">public</span> Long <span class="title">getId</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> id;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setId</span><span class="params">(Long id)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.id = id;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getEmail</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> email;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setEmail</span><span class="params">(String email)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.email = email;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> name;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.name = name;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getPassword</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> password;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setPassword</span><span class="params">(String password)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.password = password;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">"User [id="</span> + id + <span class="string">", email="</span> + email + <span class="string">", name="</span> + name + <span class="string">", password="</span> + password + <span class="string">"]"</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">hashCode</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">final</span> <span class="keyword">int</span> prime = <span class="number">31</span>;</span><br><span class="line"><span class="keyword">int</span> result = <span class="number">1</span>;</span><br><span class="line">result = prime * result + ((email == <span class="keyword">null</span>) ? <span class="number">0</span> : email.hashCode());</span><br><span class="line">result = prime * result + ((id == <span class="keyword">null</span>) ? <span class="number">0</span> : id.hashCode());</span><br><span class="line">result = prime * result + ((name == <span class="keyword">null</span>) ? <span class="number">0</span> : name.hashCode());</span><br><span class="line">result = prime * result + ((password == <span class="keyword">null</span>) ? <span class="number">0</span> : password.hashCode());</span><br><span class="line"><span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">equals</span><span class="params">(Object obj)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">this</span> == obj)</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line"><span class="keyword">if</span> (obj == <span class="keyword">null</span>)</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line"><span class="keyword">if</span> (getClass() != obj.getClass())</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">User other = (User) obj;</span><br><span class="line"><span class="keyword">if</span> (email == <span class="keyword">null</span>) &#123;</span><br><span class="line"><span class="keyword">if</span> (other.email != <span class="keyword">null</span>)</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (!email.equals(other.email))</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line"><span class="keyword">if</span> (id == <span class="keyword">null</span>) &#123;</span><br><span class="line"><span class="keyword">if</span> (other.id != <span class="keyword">null</span>)</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (!id.equals(other.id))</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line"><span class="keyword">if</span> (name == <span class="keyword">null</span>) &#123;</span><br><span class="line"><span class="keyword">if</span> (other.name != <span class="keyword">null</span>)</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (!name.equals(other.name))</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line"><span class="keyword">if</span> (password == <span class="keyword">null</span>) &#123;</span><br><span class="line"><span class="keyword">if</span> (other.password != <span class="keyword">null</span>)</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (!password.equals(other.password))</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>注意</strong>：可以使用Mybatis-generator来自动生成model、Dao、Mapping文件。</p><ol start="6"><li>jsp页面<br>按照Controller设计中需要的页面编写即可。<br>详细见<a href="https://github.com/chaoxz2/Exercise/tree/master/demo0/src/main/webapp">Github</a><h4 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h4><h5 id="测试数据库连接"><a href="#测试数据库连接" class="headerlink" title="测试数据库连接"></a>测试数据库连接</h5>使用Eclipse自带工具测试数据库连接，参照<a href="https://blog.csdn.net/qq_37844454/article/details/84194179">博客</a>做即可。<h5 id="Junit单元测试"><a href="#Junit单元测试" class="headerlink" title="Junit单元测试"></a>Junit单元测试</h5>在前一步测试完数据库连接之后，可以使用Junit测试SSM项目各个模块是否有误。比如测试Dao时，右键点击UserDao.java依次“new”“other”搜索“junit test case”，选择后点击两次“next”，选择对全部方法进行测试后”finish”。具体测试文件如下：</li></ol><figure class="highlight d"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.ssm.dao;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> org.junit.Assert.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"><span class="keyword">import</span> org.junit.runner.RunWith;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.test.context.ContextConfiguration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.test.context.junit4.SpringJUnit4ClassRunner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.ssm.entity.User;</span><br><span class="line"><span class="keyword">@RunWith</span>(SpringJUnit4ClassRunner.<span class="keyword">class</span>) <span class="comment">//使用junit4进行测试</span></span><br><span class="line"><span class="keyword">@ContextConfiguration</span>(locations=&#123;<span class="string">"classpath:spring-mybatis.xml"</span>,<span class="string">"classpath:spring-mvc.xml"</span>&#125;)</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> IUserDaoTest &#123;</span><br><span class="line"><span class="keyword">@Autowired</span> </span><br><span class="line"><span class="keyword">private</span> IUserDao userdao;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> testFindUserByEmail() &#123;</span><br><span class="line">System.<span class="keyword">out</span>.println(<span class="string">"开始测试 FindUserByEmail"</span>);</span><br><span class="line">User user =userdao.findUserByEmail(<span class="string">"754"</span>);<span class="comment">//数据库中包含该用户</span></span><br><span class="line"><span class="keyword">if</span>(user==<span class="literal">null</span>)</span><br><span class="line">System.<span class="keyword">out</span>.println(<span class="string">"FindUserByEmail测试未通过"</span>);</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">System.<span class="keyword">out</span>.println(<span class="string">"FindUserByEmail测试通过"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> testAddUserByEmail() &#123;</span><br><span class="line">System.<span class="keyword">out</span>.println(<span class="string">"开始测试 AddUserByEmail"</span>);</span><br><span class="line">User user =<span class="keyword">new</span> User();</span><br><span class="line">user.setEmail(<span class="string">"dello"</span>);</span><br><span class="line">user.setPassword(<span class="string">"password"</span>);</span><br><span class="line">userdao.addUserByEmail(user);</span><br><span class="line">User user1 = <span class="literal">null</span>;</span><br><span class="line">user1=userdao.findUserByEmail(user.getEmail())；</span><br><span class="line"><span class="keyword">if</span>(user1==<span class="literal">null</span>)</span><br><span class="line">System.<span class="keyword">out</span>.println(<span class="string">"AddUserByEmail测试未通过"</span>);</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">System.<span class="keyword">out</span>.println(<span class="string">"AddUserByEmail测试通过"</span>);</span><br><span class="line">System.<span class="keyword">out</span>.println();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> testFindUserByEmailAndPassword() &#123;</span><br><span class="line">System.<span class="keyword">out</span>.println(<span class="string">"开始测试 FindUserByEmailAndPassword"</span>);</span><br><span class="line">User user=<span class="keyword">new</span> User();</span><br><span class="line">user.setEmail(<span class="string">"890"</span>);</span><br><span class="line">user.setPassword(<span class="string">"zxcvb1"</span>);<span class="comment">//账户是数据库中已有的</span></span><br><span class="line">User user1 = userdao.findUserByEmailAndPassword(user）；</span><br><span class="line"><span class="keyword">if</span>(user1==<span class="literal">null</span>)</span><br><span class="line">System.<span class="keyword">out</span>.println(<span class="string">"FindUserByEmailAndPassword测试未通过"</span>);</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">System.<span class="keyword">out</span>.println(<span class="string">"FindUserByEmailAndPassword测试通过"</span>);</span><br><span class="line">System.<span class="keyword">out</span>.println();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> testUpdateUser() &#123;</span><br><span class="line">System.<span class="keyword">out</span>.println(<span class="string">"开始测试 UpdateUser"</span>);</span><br><span class="line">User user=userdao.findUserByEmail(<span class="string">"2533604553@qq.com"</span>);</span><br><span class="line">user.setPassword(<span class="string">"helloworld"</span>);</span><br><span class="line">userdao.updateUser(user);</span><br><span class="line">System.<span class="keyword">out</span>.println(userdao.findUserByEmail(user.getEmail()));</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>则可以测试Dao中所有方法，测试Service和这个一样，只不过使用“service”代替“userdao”，使用service中的方法代替dao中的方法。</p><h4 id="Debug-As打断点测试"><a href="#Debug-As打断点测试" class="headerlink" title="Debug As打断点测试"></a>Debug As打断点测试</h4><p>一切准备就绪后，右键项目名，依次选择”Debug As”“Debug on Server”即可。带服务器启动后，在浏览器地址栏输入项目地址，比如：<a href="http://localhost:8080/demo0/">http://localhost:8080/demo0/</a> 开始Debug,现在是作为使用者看看使用过程中可能遇到哪些问题。然后回去修改程序。<br>遇到问题，通过打断点的方式来观察值的传递是在哪一步出问题的。（Chrome浏览器的F12也可以帮助查看是哪一个方法出问题）</p>]]></content>
      
      
        <tags>
            
            <tag> SSM </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>字符串</title>
      <link href="/2018/09/24/%E5%AD%97%E7%AC%A6%E4%B8%B2/"/>
      <url>/2018/09/24/%E5%AD%97%E7%AC%A6%E4%B8%B2/</url>
      <content type="html"><![CDATA[<h3 id="1-不可变String"><a href="#1-不可变String" class="headerlink" title="1. 不可变String"></a>1. 不可变String</h3><p>String对象时不可变的，String类中每一个看起来会修改String值的方法，是加上都是创建了一个全新的String对象，以包含修改过后的字符串内容，而最初的String对象则丝毫未动。<a href="https://github.com/chaoxz2/Thinking-in-Java-4th-/blob/master/exercise/%E5%AD%97%E7%AC%A6%E4%B8%B2/Immutable.java">示例</a></p><h3 id="2-重载“-”与StringBuilder"><a href="#2-重载“-”与StringBuilder" class="headerlink" title="2. 重载“+”与StringBuilder"></a>2. 重载“+”与StringBuilder</h3><p>String对象是不可变的，你可以给一个String对象添加任意多的别名。因为String对象具有只读特性，所以指向它的任何引用都不可能改变它的值，因此也就不会对其他的引用有什么影响。不可变性也带来了效率问题。为String对象重载的“+”就是一个例子。<br>操作符“+”可以用来连接String：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Concatenation</span></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">String mango=<span class="string">"mango"</span>;</span><br><span class="line">String s=<span class="string">"abc"</span>+mango+<span class="string">"def"</span>+<span class="number">47</span>;</span><br><span class="line">System.out.println(s);</span><br><span class="line">&#125;</span><br><span class="line">&#125;<span class="comment">/*Output:</span></span><br><span class="line"><span class="comment">abcmangodef47</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure></p><p>在这个例子里，编译器创建了一个StringBuilder对象用以构造最终的String，并且为每个字符串调用一次StringBuilder的append()方法。最后调用toString（）生成结果，并存为s。StringBuilder类的详细信息可参考<a href="http://tool.oschina.net/apidocs/apidoc?api=jdk-zh">Java在线API文档</a>。<br>为一个类编写toString()方法时，如果字符串操作比较简单，就信赖编译器。如果要在toString()中使用循环，那么最好自己创建一个StringBuilder对象，用它来构造最终结果。<br>显式地创建StringBuilder对象可以使代码更简短，过程减少新的StringBuilder对象的创建，还可以指定大小，避免多次重新分配缓存。<br><a href="https://github.com/chaoxz2/Thinking-in-Java-4th-/blob/master/exercise/%E5%AD%97%E7%AC%A6%E4%B8%B2/UsingStringBuilder.java">参考示例</a><br><strong>注意：使用append()方法时切勿在参数列表里使用“+”，否则编译器会创造新的StringBuilder对象来处理参数列表里的“+”。</strong></p><h3 id="3-无意识的递归"><a href="#3-无意识的递归" class="headerlink" title="3. 无意识的递归"></a>3. 无意识的递归</h3><p>Java每个类从根本上都是继承自Object类，标准容易类也不例外，所以它们也有toString（）方法，并且覆写了该方法，使得它生成的结果能够表达容器自身和容器所包含的对象。例：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ArrayListDisplay</span></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">ArrayList&lt;Integer&gt; integers=<span class="keyword">new</span> ArrayList&lt;Integer&gt;();</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">10</span>;i++)</span><br><span class="line">integers.add(i);</span><br><span class="line">System.out.println(integers);</span><br><span class="line">&#125;</span><br><span class="line">&#125;<span class="comment">/*Output:</span></span><br><span class="line"><span class="comment">[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure></p><p>假如希望toString()方法打印出对象的内存地址就会出错：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">InfiniteRecursion</span></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">" InfiniteRecursion address: "</span>+<span class="keyword">super</span>.toString()+<span class="string">"\n"</span>;<span class="comment">//!return " InfiniteRecursion address: "+this+"\n";</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">List&lt;InfiniteRecursion&gt; v=<span class="keyword">new</span> ArrayList&lt;InfiniteRecursion&gt;();</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">10</span>;i++)</span><br><span class="line">v.add(<span class="keyword">new</span> InfiniteRecursion());</span><br><span class="line">System.out.print(v);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*Output:</span></span><br><span class="line"><span class="comment">[ InfiniteRecursion address: InfiniteRecursion@61064425</span></span><br><span class="line"><span class="comment">,  InfiniteRecursion address: InfiniteRecursion@d70c109</span></span><br><span class="line"><span class="comment">,  InfiniteRecursion address: InfiniteRecursion@17ed40e0</span></span><br><span class="line"><span class="comment">,  InfiniteRecursion address: InfiniteRecursion@50675690</span></span><br><span class="line"><span class="comment">,  InfiniteRecursion address: InfiniteRecursion@31b7dea0</span></span><br><span class="line"><span class="comment">,  InfiniteRecursion address: InfiniteRecursion@3ac42916</span></span><br><span class="line"><span class="comment">,  InfiniteRecursion address: InfiniteRecursion@47d384ee</span></span><br><span class="line"><span class="comment">,  InfiniteRecursion address: InfiniteRecursion@2d6a9952</span></span><br><span class="line"><span class="comment">,  InfiniteRecursion address: InfiniteRecursion@22a71081</span></span><br><span class="line"><span class="comment">,  InfiniteRecursion address: InfiniteRecursion@3930015a</span></span><br><span class="line"><span class="comment">]</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure></p><p>当运行到<code>&quot; InfiniteRecursion address: &quot;+this</code>时就发生了自动转换，由InfiniteRecursion类型转换成了String类型：编译器看到String对象后跟着一个“+”，在后面的对象不是String，编译器试着将this转换成一个String。它怎么转换呢，正是通过调用this上的toString()方法，于是就发生了递归调用。<br>所以如果真的想打印出对象的地址，应该调用Object.toString()方法。所以，不应该使用this,而应该调用super.toString()方法。（使用<code>&quot; InfiniteRecursion address: &quot;+super.toString()</code>而不是<code>&quot; InfiniteRecursion address: &quot;+this</code>）</p><h3 id="4-String上的操作"><a href="#4-String上的操作" class="headerlink" title="4. String上的操作"></a>4. String上的操作</h3><p>String对象具备的一些基本方法：<br><img src="https://i.imgur.com/LWgoUgH.png" alt=""></p><h3 id="5-格式化输出"><a href="#5-格式化输出" class="headerlink" title="5. 格式化输出"></a>5. 格式化输出</h3><h4 id="1-printf"><a href="#1-printf" class="headerlink" title="1. printf()"></a>1. printf()</h4><p>使用特殊的占位符来表示数据将来的位置，将插入格式化字符串的参数以逗号分隔，排成一行。例如：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">printf(<span class="string">"Row1: [%d %f]\n"</span>,x,y);</span><br></pre></td></tr></table></figure></p><h4 id="2-System-out-format"><a href="#2-System-out-format" class="headerlink" title="2. System.out.format()"></a>2. System.out.format()</h4><p>format方法可用于PrintStream或PrintWriter对象，其中也包括System.out对象。（format()与printf()是等价的，需要一个格式化字符串，加上一串参数即可，每个参数对应一个格式修饰符）。例：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SimpleFormat</span></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> x=<span class="number">5</span>;</span><br><span class="line"><span class="keyword">double</span> y=<span class="number">5.332542</span>;</span><br><span class="line"><span class="comment">//the old way:</span></span><br><span class="line">System.out.println(<span class="string">"Row 1: ["</span>+x+<span class="string">" "</span>+y+<span class="string">"]"</span>);</span><br><span class="line"><span class="comment">//the new way:</span></span><br><span class="line">System.out.format(<span class="string">"Row 1: [%d %f]\n"</span>,x,y);</span><br><span class="line"><span class="comment">//or:</span></span><br><span class="line">System.out.printf(<span class="string">"Row 1: [%d %f]\n"</span>,x,y);</span><br><span class="line">&#125;</span><br><span class="line">&#125;<span class="comment">/*Output:</span></span><br><span class="line"><span class="comment">Row 1: [5 5.332542]</span></span><br><span class="line"><span class="comment">Row 1: [5 5.332542]</span></span><br><span class="line"><span class="comment">Row 1: [5 5.332542]</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure></p><h4 id="3-Formatter类"><a href="#3-Formatter类" class="headerlink" title="3. Formatter类"></a>3. Formatter类</h4><p>可以把Formatter看成一个翻译器，它将格式化字符串与数据翻译成需要的结果。当创建一个Formatter对象时，需要向其构造器传递一些信息，以告诉它最终的结果将向哪里输出，比如：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Turtle</span></span>&#123;</span><br><span class="line"><span class="keyword">private</span> String name;</span><br><span class="line"><span class="keyword">private</span> Formatter f;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Turtle</span><span class="params">(String name,Formatter f)</span></span>&#123;</span><br><span class="line"><span class="keyword">this</span>.name=name;</span><br><span class="line"><span class="keyword">this</span>.f=f;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">move</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span></span>&#123;</span><br><span class="line">f.format(<span class="string">"%s The Turtle is at (%d,%d)\n"</span>,name,x,y);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">PrintStream outAlias=System.out;</span><br><span class="line">Turtle tommy=<span class="keyword">new</span> Turtle(<span class="string">"Tommy"</span>,<span class="keyword">new</span> Formatter(System.out));</span><br><span class="line">Turtle terry=<span class="keyword">new</span> Turtle(<span class="string">"Terry"</span>,<span class="keyword">new</span> Formatter(outAlias));</span><br><span class="line">tommy.move(<span class="number">0</span>,<span class="number">0</span>);</span><br><span class="line">terry.move(<span class="number">4</span>,<span class="number">8</span>);</span><br><span class="line">tommy.move(<span class="number">3</span>,<span class="number">4</span>);</span><br><span class="line">tommy.move(<span class="number">2</span>,<span class="number">5</span>);</span><br><span class="line">tommy.move(<span class="number">3</span>,<span class="number">3</span>);</span><br><span class="line">tommy.move(<span class="number">3</span>,<span class="number">3</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;<span class="comment">/*Output:</span></span><br><span class="line"><span class="comment">Tommy The Turtle is at (0,0)</span></span><br><span class="line"><span class="comment">Terry The Turtle is at (4,8)</span></span><br><span class="line"><span class="comment">Tommy The Turtle is at (3,4)</span></span><br><span class="line"><span class="comment">Tommy The Turtle is at (2,5)</span></span><br><span class="line"><span class="comment">Tommy The Turtle is at (3,3)</span></span><br><span class="line"><span class="comment">Tommy The Turtle is at (3,3)</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure></p><p>中的<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">PrintStream outAlias=System.out;</span><br><span class="line">Turtle tommy=<span class="keyword">new</span> Turtle(<span class="string">"Tommy"</span>,<span class="keyword">new</span> Formatter(System.out));</span><br><span class="line">Turtle terry=<span class="keyword">new</span> Turtle(<span class="string">"Terry"</span>,<span class="keyword">new</span> Formatter(outAlias));</span><br></pre></td></tr></table></figure></p><h4 id="4-格式化说明符"><a href="#4-格式化说明符" class="headerlink" title="4. 格式化说明符"></a>4. 格式化说明符</h4><p><strong><em>%[argument_index$][flags][width][.precision]conversion</em></strong><br>    width指定域的最小尺寸（formatter对象通过在必要时添加空格，来确保至少达到一个长度，默认是右对齐，可以通过使用“-”来改变对齐方式），可用于各种类型的数据转换，行为方式一样。<br>    precision用来指定最大尺寸。不是所有类型的数据都能使用它，应用于不同类型的数据转换时也有不同的意义:</p><ul><li>将precision应用于String时，表示打印String时输出字符的最大数量；</li><li>将precision应用于浮点数时，表示小数部分要显示出来的位数（过多舍入，过少补零）；</li><li>precision不能应用于整数。<br>例：</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Receipt</span></span>&#123;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">double</span> total=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">private</span> Formatter f=<span class="keyword">new</span> Formatter(System.out);</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">printTitle</span><span class="params">()</span></span>&#123;</span><br><span class="line">f.format(<span class="string">"%-15s %5s %10s\n"</span>,<span class="string">"Item"</span>,<span class="string">"Qty"</span>,<span class="string">"Price"</span>);</span><br><span class="line">f.format(<span class="string">"%15s %5s %10s\n"</span>,<span class="string">"----"</span>,<span class="string">"---"</span>,<span class="string">"-----"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">print</span><span class="params">(String name,<span class="keyword">int</span> qty,<span class="keyword">double</span> price)</span></span>&#123;</span><br><span class="line">f.format(<span class="string">"%-15.15s %5d %10.2f\n"</span>,name,qty,price);</span><br><span class="line">total+=price;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">printTotal</span><span class="params">()</span></span>&#123;</span><br><span class="line">f.format(<span class="string">"%-15s %5s %10.2f\n"</span>,<span class="string">"Tax"</span>,<span class="string">""</span>,total*<span class="number">0.06</span>);</span><br><span class="line">f.format(<span class="string">"%-15s %5s %10s\n"</span>,<span class="string">""</span>,<span class="string">""</span>,<span class="string">"-----"</span>);</span><br><span class="line">f.format(<span class="string">"%-15s %5s %10.2f\n"</span>,<span class="string">"Total"</span>,<span class="string">""</span>,total*<span class="number">1.06</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">Receipt receipt=<span class="keyword">new</span> Receipt();</span><br><span class="line">receipt.printTitle();</span><br><span class="line">receipt.print(<span class="string">"Jack's Magic Beans"</span>,<span class="number">4</span>,<span class="number">4.25</span>);</span><br><span class="line">receipt.print(<span class="string">"Pricess Peas"</span>,<span class="number">3</span>,<span class="number">5.1</span>);</span><br><span class="line">receipt.print(<span class="string">"Three Bears Porridge"</span>,<span class="number">1</span>,<span class="number">14.29</span>);</span><br><span class="line">receipt.printTotal();</span><br><span class="line">&#125;</span><br><span class="line">&#125;<span class="comment">/*Output:</span></span><br><span class="line"><span class="comment">Item              Qty      Price</span></span><br><span class="line"><span class="comment">           ----   ---      -----</span></span><br><span class="line"><span class="comment">Jack's Magic Be     4       4.25</span></span><br><span class="line"><span class="comment">Pricess Peas        3       5.10</span></span><br><span class="line"><span class="comment">Three Bears Por     1      14.29</span></span><br><span class="line"><span class="comment">Tax                         1.42</span></span><br><span class="line"><span class="comment">                           -----</span></span><br><span class="line"><span class="comment">Total                      25.06</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><p>令所有的宽度都由一个常量来控制，使宽度的改变更容易的<a href="https://github.com/chaoxz2/Thinking-in-Java-4th-/blob/master/exercise/%E5%AD%97%E7%AC%A6%E4%B8%B2/BackEx134.java">简化程序</a>。</p><h4 id="5-Formatter转换"><a href="#5-Formatter转换" class="headerlink" title="5. Formatter转换"></a>5. Formatter转换</h4><p>常用类型转换：<br><img src="https://i.imgur.com/w1MsnRJ.png" alt=""><br><a href="https://github.com/chaoxz2/Thinking-in-Java-4th-/blob/master/exercise/%E5%AD%97%E7%AC%A6%E4%B8%B2/Conversion.java">示例程序</a><br>注意b转换，对于Boolean对象或者boolean基本类型，其转换结果使对应的true或false，但是，对其他类型的参数，只要不是null，转换的结果就永远是true。</p><h4 id="6-String-format-方法"><a href="#6-String-format-方法" class="headerlink" title="6. String.format()方法"></a>6. String.format()方法</h4><p>String.format()是一个static方法，接受与Formatter.format()一样的参数，但返回一个String对象。例如：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DatabaseException</span> <span class="keyword">extends</span> <span class="title">Exception</span></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">DatabaseException</span><span class="params">(<span class="keyword">int</span> transactionID,<span class="keyword">int</span> queryID,String message)</span></span>&#123;</span><br><span class="line"><span class="keyword">super</span>(String.format(<span class="string">"(t%d, q%d) %s"</span>, transactionID,queryID,message));</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line"><span class="keyword">try</span>&#123;</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> DatabaseException(<span class="number">3</span>,<span class="number">7</span>,<span class="string">"Write failed"</span>);</span><br><span class="line">&#125;<span class="keyword">catch</span>(Exception e)&#123;</span><br><span class="line">System.out.println(e);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;<span class="comment">/*Output:</span></span><br><span class="line"><span class="comment">DatabaseException: (t3, q7) Write failed</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure></p><p>其实在String.format（）内部，也是创建一个Formatter对象，然后将传入的参数传给这个Formatter。</p><h3 id="6-正则表达式"><a href="#6-正则表达式" class="headerlink" title="6. 正则表达式"></a>6. 正则表达式</h3><h4 id="1-基础"><a href="#1-基础" class="headerlink" title="1. 基础"></a>1. 基础</h4><ul><li>查找一个数字： “\d”</li><li>查找一个或多个数字： “\d+”</li><li>查找一个前面带负号的数字：”-\d”</li><li>查找一个前面可能带负号的数字：”-?\d”</li><li>查找一个前面带正号或者负号的数字：”(-|\+)?\d”(“+”在正则表达式中有特殊含义，所以用\将其转义。使之称为表达式中的一个普通字符)</li></ul><p>String自带的三个正则表达式工具：</p><ul><li>matcher()方法：<code>&quot;Hello World&quot;.matches(&quot;\\w+\\W\\w+&quot;)</code></li><li>split()方法，功能是“将字符串从匹配正则表达式的地方切开”：<code>&quot;Hello World&quot;.split(&quot; &quot;)</code>;<a href="https://github.com/chaoxz2/Thinking-in-Java-4th-/blob/master/exercise/%E5%AD%97%E7%AC%A6%E4%B8%B2/Splitting.java">详细示例</a>。</li><li>“替换”，替换符合正则表达式的第一个地方或者所有匹配的地方：<code>s.replaceFirst(&quot;f\\w+&quot;,&quot;hello&quot;)</code>或者<code>s.replaceAll(&quot;f\\w+&quot;,&quot;hello&quot;)</code><a href="https://github.com/chaoxz2/Thinking-in-Java-4th-/blob/master/exercise/%E5%AD%97%E7%AC%A6%E4%B8%B2/Replacing.java">详细示例</a>。</li></ul><h4 id="2-创建正则表达式"><a href="#2-创建正则表达式" class="headerlink" title="2. 创建正则表达式"></a>2. 创建正则表达式</h4><p>字符：</p><table><thead><tr><th>字符</th><th>含义</th><th>字符</th><th>含义</th></tr></thead><tbody><tr><td>B</td><td>自定字符B</td><td>\n</td><td>换行符</td><td></td></tr><tr><td>\xhh</td><td>十六进制值为0xhh的字符</td><td>\r</td><td>回车</td><td></td></tr><tr><td>\uhhhh</td><td>十六进制表示为0xhhhh的Unicode字符</td><td>\f</td><td>换页</td><td></td></tr><tr><td>\t</td><td>制表符Tab</td><td>\e</td><td>转义（Escape）</td><td></td></tr></tbody></table><p>创建字符类的典型方式和一些预定义的类：<br>字符类：</p><table><thead><tr><th>字符串</th><th>含义</th><th>字符串</th><th>含义</th></tr></thead><tbody><tr><td>  .</td><td>任意字符</td><td>\s</td><td>空白符（空格、tab、换行、换页和回车）</td><td></td></tr><tr><td> [abc]</td><td>包含a、b和c的任何字符（a&#124;b&#124;c）</td><td>\S</td><td>非空白符（[^\s]）</td><td></td></tr><tr><td> [^abc]</td><td>除了a、b和c之外的任何字符（否定）</td><td>\d</td><td>数字0-9</td><td></td></tr><tr><td> [a-zA-Z]</td><td>从a到z或者从A到Z的任何字符（范围）</td><td>\D</td><td>非数字0-9[^0-9]</td><td></td></tr><tr><td> [abc[hij]]</td><td>任意a、b、c、h、i和j字符（a&#124;b&#124;c&#124;h&#124;i&#124;j）</td><td>\w</td><td>词字符[a-zA-Z0-9]</td><td></td></tr><tr><td> [abc&amp;&amp;[hij]]</td><td>任意h、i或j（交）</td><td>\W</td><td>非词字符[^\w]</td><td></td></tr></tbody></table><p>部分常用表达式：<br>逻辑操作符：</p><table><thead><tr><th>表达式</th><th>含义</th></tr></thead><tbody><tr><td> XY</td><td>Y跟在X后面</td></tr><tr><td> X&#124;Y</td><td>X或者Y</td></tr><tr><td>（X）</td><td>捕获组，可以在表达式中用\i引用第i个捕获组</td></tr></tbody></table><p>匹配边界符：</p><table><thead><tr><th>表达式</th><th>含义</th><th>表达式</th><th>含义</th></tr></thead><tbody><tr><td>^</td><td>一行的起始位置</td><td>\B</td><td>非词的边界</td></tr><tr><td>$</td><td>一行的结束</td><td>\G</td><td>前一个匹配的结束</td></tr><tr><td>\b</td><td>词的边界</td><td>-</td><td>-</td><td></td></tr></tbody></table><h4 id="3-量词"><a href="#3-量词" class="headerlink" title="3. 量词"></a>3. 量词</h4><p>量词描述了一个模式吸收输入文本的方式：</p><ul><li>贪婪型：量词总是贪婪的。贪婪表达式会为所有可能的模式发现尽可能多的匹配。</li><li>勉强型：用问好来指定：这个量词匹配满足模式所需的最少字符数。</li><li>占有型：目前只有在Java语言中可用。当正则表达式被应用于字符串时，会产生相当多的状态，以便在匹配失败时回溯。“占有型”量词不保存这些中间状态，以防止回溯。它们常常用于防止正则表达式失控。因此可以使正则表达式执行起来更有效。</li></ul><table><thead><tr><th></th><th>贪婪型</th><th>勉强型</th><th>占有型</th><th>如何匹配</th></tr></thead><tbody><tr><td>X?</td><td>X??</td><td>X?+</td><td>一个或者零个X</td></tr><tr><td>X*</td><td>X*?</td><td>X*+</td><td>零个或多个X</td></tr><tr><td>X+</td><td>X+?</td><td>X++</td><td>一个或者多个X</td></tr><tr><td>X{n}</td><td>X{n}?</td><td>X{n}+</td><td>恰好n次X</td></tr><tr><td>X{n,}</td><td>X{n,}?</td><td>X{n,}+</td><td>至少n次X</td></tr><tr><td>X{n,m}</td><td>X{n,m}?</td><td>X{n,m}+</td><td>X至少n次，且不超过m次</td></tr></tbody></table><p><strong>注意：为了防止歧义，表达式X通常用括号括起来。</strong></p><h4 id="4-Pattern和Matcher"><a href="#4-Pattern和Matcher" class="headerlink" title="4. Pattern和Matcher"></a>4. Pattern和Matcher</h4><p>String类提供的正则表达式功能有限，所以我们需自己构造正则表达式对象，使用java.util.regex包可以实现这个目标：</p><ul><li>首先，导入java.util.regex包。</li><li>第二步，使用static Pattern.compile()方法编译正则表达式。在这个过程中，它会根据String类型的正则表达式生成一个Pattern对象。</li><li>第三步，把想要检索的字符串传给Pattern对象的matcher()方法。matcher()方法会生成一个Matcher对象，它有很多功能可用（<a href="https://docs.oracle.com/javase/7/docs/api/java/util/regex/package-summary.html">官方文档</a>）。<br>例：</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.regex.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span></span>&#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> String s=</span><br><span class="line"><span class="string">"Hello world, he put up his hands and said "</span>+</span><br><span class="line"><span class="string">"I miss you, but I can't touch you, my love. "</span>+</span><br><span class="line"><span class="string">"now it's time to say goodbye to this world and say heelo wo you,"</span>+</span><br><span class="line"><span class="string">" I'm here."</span>;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">Pattern p=Pattern.compile(<span class="string">"\\w+"</span>);</span><br><span class="line">Matcher m=p.matcher(s);</span><br><span class="line"><span class="keyword">while</span>(m.find())&#123;</span><br><span class="line">System.out.println(<span class="string">"Matcher() \""</span>+m.group()+<span class="string">"\" start at: "</span>+m.start()+<span class="string">" and end at: "</span>+(m.end()-<span class="number">1</span>));</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;<span class="comment">/*Output:</span></span><br><span class="line"><span class="comment">Matcher() "Hello" start at: 0 and end at: 4</span></span><br><span class="line"><span class="comment">Matcher() "world" start at: 6 and end at: 10</span></span><br><span class="line"><span class="comment">Matcher() "he" start at: 13 and end at: 14</span></span><br><span class="line"><span class="comment">Matcher() "put" start at: 16 and end at: 18</span></span><br><span class="line"><span class="comment">Matcher() "up" start at: 20 and end at: 21</span></span><br><span class="line"><span class="comment">Matcher() "his" start at: 23 and end at: 25</span></span><br><span class="line"><span class="comment">Matcher() "hands" start at: 27 and end at: 31</span></span><br><span class="line"><span class="comment">Matcher() "and" start at: 33 and end at: 35</span></span><br><span class="line"><span class="comment">Matcher() "said" start at: 37 and end at: 40</span></span><br><span class="line"><span class="comment">Matcher() "I" start at: 42 and end at: 42</span></span><br><span class="line"><span class="comment">Matcher() "miss" start at: 44 and end at: 47</span></span><br><span class="line"><span class="comment">Matcher() "you" start at: 49 and end at: 51</span></span><br><span class="line"><span class="comment">Matcher() "but" start at: 54 and end at: 56</span></span><br><span class="line"><span class="comment">Matcher() "I" start at: 58 and end at: 58</span></span><br><span class="line"><span class="comment">Matcher() "can" start at: 60 and end at: 62</span></span><br><span class="line"><span class="comment">Matcher() "t" start at: 64 and end at: 64</span></span><br><span class="line"><span class="comment">Matcher() "touch" start at: 66 and end at: 70</span></span><br><span class="line"><span class="comment">Matcher() "you" start at: 72 and end at: 74</span></span><br><span class="line"><span class="comment">Matcher() "my" start at: 77 and end at: 78</span></span><br><span class="line"><span class="comment">Matcher() "love" start at: 80 and end at: 83</span></span><br><span class="line"><span class="comment">Matcher() "now" start at: 86 and end at: 88</span></span><br><span class="line"><span class="comment">Matcher() "it" start at: 90 and end at: 91</span></span><br><span class="line"><span class="comment">Matcher() "s" start at: 93 and end at: 93</span></span><br><span class="line"><span class="comment">Matcher() "time" start at: 95 and end at: 98</span></span><br><span class="line"><span class="comment">Matcher() "to" start at: 100 and end at: 101</span></span><br><span class="line"><span class="comment">Matcher() "say" start at: 103 and end at: 105</span></span><br><span class="line"><span class="comment">Matcher() "goodbye" start at: 107 and end at: 113</span></span><br><span class="line"><span class="comment">Matcher() "to" start at: 115 and end at: 116</span></span><br><span class="line"><span class="comment">Matcher() "this" start at: 118 and end at: 121</span></span><br><span class="line"><span class="comment">Matcher() "world" start at: 123 and end at: 127</span></span><br><span class="line"><span class="comment">Matcher() "and" start at: 129 and end at: 131</span></span><br><span class="line"><span class="comment">Matcher() "say" start at: 133 and end at: 135</span></span><br><span class="line"><span class="comment">Matcher() "heelo" start at: 137 and end at: 141</span></span><br><span class="line"><span class="comment">Matcher() "wo" start at: 143 and end at: 144</span></span><br><span class="line"><span class="comment">Matcher() "you" start at: 146 and end at: 148</span></span><br><span class="line"><span class="comment">Matcher() "I" start at: 151 and end at: 151</span></span><br><span class="line"><span class="comment">Matcher() "m" start at: 153 and end at: 153</span></span><br><span class="line"><span class="comment">Matcher() "here" start at: 155 and end at: 158</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><ul><li>Matcher.find()方法可以用来在CharSequence中查找多个匹配，例如：</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.regex.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">Pattern p=Pattern.compile(<span class="string">"\\w+"</span>);</span><br><span class="line">Matcher m=p.matcher(<span class="string">"Evening is full of the linnet's wings"</span>);</span><br><span class="line"><span class="keyword">while</span>(m.find())&#123;</span><br><span class="line">System.out.println(m.group()+<span class="string">" start at: "</span>+m.start()+<span class="string">" end at: "</span>+(m.end()-<span class="number">1</span>));</span><br><span class="line">&#125;</span><br><span class="line">System.out.println();</span><br><span class="line"><span class="keyword">int</span> i=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span>(m.find(i))&#123;</span><br><span class="line">System.out.print(m.group()+<span class="string">" "</span>);</span><br><span class="line">i++;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;<span class="comment">/*Output:</span></span><br><span class="line"><span class="comment">Evening start at: 0 end at: 6</span></span><br><span class="line"><span class="comment">is start at: 8 end at: 9</span></span><br><span class="line"><span class="comment">full start at: 11 end at: 14</span></span><br><span class="line"><span class="comment">of start at: 16 end at: 17</span></span><br><span class="line"><span class="comment">the start at: 19 end at: 21</span></span><br><span class="line"><span class="comment">linnet start at: 23 end at: 28</span></span><br><span class="line"><span class="comment">s start at: 30 end at: 30</span></span><br><span class="line"><span class="comment">wings start at: 32 end at: 36</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">Evening vening ening ning ing ng g is is s full full ull ll l of of f the the he e linnet linnet innet nnet net et t s s wings wings ings ngs gs s</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><p>第一个find()像迭代器那样前向遍历输入字符串，第二个find()接收一个整数作为参数，该整数表示字符串中字符的位置，并以其作为搜索的起点。从结果可以看出，后裔版本的find()能根据其参数的值不断重新设定搜索的起始位置。</p><h4 id="5-split"><a href="#5-split" class="headerlink" title="5. split()"></a>5. split()</h4><h4 id="6-替换操作"><a href="#6-替换操作" class="headerlink" title="6. 替换操作"></a>6. 替换操作</h4><h4 id="7-reset"><a href="#7-reset" class="headerlink" title="7. reset()"></a>7. reset()</h4><h4 id="8-正则表达式与java-I-O"><a href="#8-正则表达式与java-I-O" class="headerlink" title="8. 正则表达式与java I/O"></a>8. 正则表达式与java I/O</h4><h3 id="7-扫描输入"><a href="#7-扫描输入" class="headerlink" title="7. 扫描输入"></a>7. 扫描输入</h3><h3 id="8-StringTokenizer"><a href="#8-StringTokenizer" class="headerlink" title="8. StringTokenizer"></a>8. StringTokenizer</h3>]]></content>
      
      
        <tags>
            
            <tag> 字符串 String </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>通过异常处理错误</title>
      <link href="/2018/09/12/%E9%80%9A%E8%BF%87%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86%E9%94%99%E8%AF%AF/"/>
      <url>/2018/09/12/%E9%80%9A%E8%BF%87%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86%E9%94%99%E8%AF%AF/</url>
      <content type="html"><![CDATA[<h3 id="1-异常"><a href="#1-异常" class="headerlink" title="1. 异常"></a>1. 异常</h3><p>异常是阻止当前方法或作用域继续执行的问题。在当前环境下无法获取必要的信息来解决问题，所做的只能是从当前环境跳出，把问题提交给上一级环境。这就是抛出异常时发生的事。<br>当抛出异常后，有几件事随之发生：<br>    首先，将使用new在堆上创建异常对象；<br>    然后，<strong>当前执行路径被终止</strong>，并且从当前环境中弹出对异常对象的引用。此时异常处理机制接管程序，开始寻找一个恰当的地方（异常处理程序）将程序从错误中恢复，使程序换一种方式运行，或者继续运行下去。<br>异常最重要的方面之一就是如果发生问题，它们将不允许程序沿着其正常的路径继续走下去。异常允许我们强制程序停止运行，并告诉我们出现了什么问题，或者强制程序处理问题，回到稳定状态。</p><hr><h3 id="2-捕获异常"><a href="#2-捕获异常" class="headerlink" title="2. 捕获异常"></a>2. 捕获异常</h3><h4 id="1-try块"><a href="#1-try块" class="headerlink" title="1. try块"></a>1. try块</h4><p>如果在方法内部抛出异常，这个方法将在抛出异常的过程中结束，要是不希望方法就此结束，可以在方法内设置一个特殊的块来捕获异常。因为在这个块里尝试各种方法调用，所以称为try块，是跟在try关键字后的普通程序块。例如：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span>&#123;</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> Exception();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h4 id="2-异常处理"><a href="#2-异常处理" class="headerlink" title="2. 异常处理"></a>2. 异常处理</h4><p>抛出的异常必须在某处的到处理，处理它的地方就是异常处理程序，针对每个要捕获的异常，要准备相应的异常处理程序。异常处理程序紧跟在try块后面，以关键字catch表示。例如:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span>&#123;</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> Exception();</span><br><span class="line">&#125;<span class="keyword">catch</span>(Exception e)&#123;</span><br><span class="line">System.out.println(<span class="string">"Caught Exception: "</span>+e);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>那么，异常处理程序就能处理try块中抛出的Exception及其子类异常，处理方式是输出“Caught Exception: ”和具体异常名称。</p><h4 id="3-使用finally清理"><a href="#3-使用finally清理" class="headerlink" title="3. 使用finally清理"></a>3. 使用finally清理</h4><p>对于一些代码，可能会希望无论try块中是否抛出异常，它们都能得到执行。为了达到这个效果，可以在异常处理程序之后加上finally子句。例如：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span>&#123;</span><br><span class="line">f();</span><br><span class="line">&#125;<span class="keyword">catch</span>(Exception e)&#123;</span><br><span class="line"> System.out.println(<span class="string">"Caught Exception: "</span>+e);</span><br><span class="line">&#125;<span class="keyword">finally</span>&#123;</span><br><span class="line"> System.out.println(<span class="string">"Well Done!"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>如果f()抛出Exception,异常被捕获，处理，然后执行finally内容，输出为：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Caught Exception: Exception</span><br><span class="line">Well Done!</span><br></pre></td></tr></table></figure></p><p>如果f()不抛出异常，异常处理程序不被调用，执行finally内容,输出为：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Well Done!</span><br></pre></td></tr></table></figure></p><p>即，无论try块是否抛出异常，finally子句都会被执行。<br><em>因为涉及break和continue时finally子句也会得到执行。所以把finally子句和带标签的break和continue配合使用，可以取代goto。</em></p><h5 id="1-finally用来做什么"><a href="#1-finally用来做什么" class="headerlink" title="1. finally用来做什么"></a>1. finally用来做什么</h5><p>当要把除内存之外的资源恢复到它们的初始状态时，就需要用到finally子句。这种需要清理的资源可以是：已经打开的文件或者网络连接，在屏幕上画的图形，甚至可以是外部世界的某个开关。<a href="https://github.com/chaoxz2/Thinking-in-Java-4th-/blob/master/exercise/%E9%80%9A%E8%BF%87%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86%E9%94%99%E8%AF%AF/Switch.java">示例1</a>更好的<a href="https://github.com/chaoxz2/Thinking-in-Java-4th-/blob/master/exercise/%E9%80%9A%E8%BF%87%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86%E9%94%99%E8%AF%AF/WithFinally.java">示例2</a>，<a href="https://github.com/chaoxz2/Thinking-in-Java-4th-/blob/master/exercise/%E9%80%9A%E8%BF%87%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86%E9%94%99%E8%AF%AF/AlwaysFinally.java">示例3</a>。</p><h5 id="2-在return中使用finally"><a href="#2-在return中使用finally" class="headerlink" title="2. 在return中使用finally"></a>2. 在return中使用finally</h5><p>因为finally子句总是会执行的，所以在一个方法中，可以从多个点返回，并且可以保证重要的清理工作依旧会执行。<a href="https://github.com/chaoxz2/Thinking-in-Java-4th-/blob/master/exercise/%E9%80%9A%E8%BF%87%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86%E9%94%99%E8%AF%AF/MultipleReturns.java">示例</a></p><h5 id="3-异常丢失"><a href="#3-异常丢失" class="headerlink" title="3. 异常丢失"></a>3. 异常丢失</h5><p>用某些特殊的方法使用finally子句，就会出现异常被忽略的情况。</p><ul><li>未处理抛出的错误就在fnally子句里抛出新的异常<h4 id="4-终止与恢复"><a href="#4-终止与恢复" class="headerlink" title="4. 终止与恢复"></a>4. 终止与恢复</h4>异常处理理论上有两种模型，一种是终止模型，一旦异常被抛出，不能回来继续执行；一种是恢复模型，异常处理程序修正错误，重新调用出问题的方法。Java支持终止模型，要想让Java实现类似恢复行为，那么在遇见错误时就不能抛出异常，而是调用方法来修正错误。或者把try块放进while循环里，不断进入try块直到得到满意的结果。例如：<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span></span>&#123;</span><br><span class="line"><span class="keyword">static</span> <span class="keyword">int</span> counter;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line"><span class="keyword">while</span>(<span class="keyword">true</span>)&#123;</span><br><span class="line"><span class="keyword">try</span>&#123;</span><br><span class="line"><span class="keyword">if</span>(counter++==<span class="number">0</span>)</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> Exception();</span><br><span class="line">System.out.println(<span class="string">"No Exception"</span>);</span><br><span class="line">&#125;<span class="keyword">catch</span>(Exception e)&#123;</span><br><span class="line">System.out.println(<span class="string">"Exception"</span>);</span><br><span class="line">&#125;<span class="keyword">finally</span>&#123;</span><br><span class="line">System.out.println(<span class="string">"In finally clause"</span>);</span><br><span class="line"><span class="keyword">if</span>(counter==<span class="number">3</span>)</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;<span class="comment">/*Output:</span></span><br><span class="line"><span class="comment">Exception</span></span><br><span class="line"><span class="comment">In finally clause</span></span><br><span class="line"><span class="comment">No Exception</span></span><br><span class="line"><span class="comment">In finally clause</span></span><br><span class="line"><span class="comment">No Exception</span></span><br><span class="line"><span class="comment">In finally clause</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure></li></ul><hr><h3 id="3-自定义异常"><a href="#3-自定义异常" class="headerlink" title="3. 自定义异常"></a>3. 自定义异常</h3><h4 id="1-创建自定义异常"><a href="#1-创建自定义异常" class="headerlink" title="1. 创建自定义异常"></a>1. 创建自定义异常</h4><p>可以创建自定义异常来表示程序可能遇到的特定异常。但是新异常类型<strong>必须从已有的异常类继承</strong>，最好选择意思相近的异常类继承。<br>-System.out和System.err:<br>System.err将错误发送至标准错误流，不会被重定向；<br>System.out也许会被重定向。</p><p>-printStackTrace():打印“从方法调用处直到异常抛出处”的方法调用序列；</p><h4 id="2-异常与记录日志"><a href="#2-异常与记录日志" class="headerlink" title="2. 异常与记录日志"></a>2. 异常与记录日志</h4><p>通过添加或调用如下方法记录程序异常日志：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.logging.*;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> Loggerlogger=Logger.getLogger(<span class="string">"LoggingException"</span>);</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">LoggingException</span><span class="params">()</span></span>&#123;</span><br><span class="line">StringWriter trace=<span class="keyword">new</span> StringWriter();</span><br><span class="line">printStackTrace(<span class="keyword">new</span> PrintWriter(trace));</span><br><span class="line">logger.severe(trace.toString());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>例如，要让程序记录自身的异常日志,就需要在定义异常类的时候添加它：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.logging.*;</span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">LoggingException</span> <span class="keyword">extends</span> <span class="title">Exception</span></span>&#123;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> Logger logger=Logger.getLogger(<span class="string">"LoggingException"</span>);</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">LoggingException</span><span class="params">()</span></span>&#123;</span><br><span class="line">StringWriter trace=<span class="keyword">new</span> StringWriter();</span><br><span class="line">printStackTrace(<span class="keyword">new</span> PrintWriter(trace));</span><br><span class="line">logger.severe(trace.toString());</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LoggingExceptions</span></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line"><span class="keyword">try</span>&#123;</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> LoggingException();</span><br><span class="line">&#125;<span class="keyword">catch</span>(LoggingException e)&#123;</span><br><span class="line">System.err.println(<span class="string">"Caught "</span>+e);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">try</span>&#123;</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> LoggingException();</span><br><span class="line">&#125;<span class="keyword">catch</span>(LoggingException e)&#123;</span><br><span class="line">System.err.println(<span class="string">"Caught "</span>+e);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;<span class="comment">/*Output:</span></span><br><span class="line"><span class="comment">9月 13, 2018 10:49:29 上午 LoggingException &lt;init&gt;</span></span><br><span class="line"><span class="comment">严重: LoggingException</span></span><br><span class="line"><span class="comment">        at LoggingExceptions.main(LoggingExceptions.java:16)</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">Caught LoggingException</span></span><br><span class="line"><span class="comment">9月 13, 2018 10:49:29 上午 LoggingException &lt;init&gt;</span></span><br><span class="line"><span class="comment">严重: LoggingException</span></span><br><span class="line"><span class="comment">        at LoggingExceptions.main(LoggingExceptions.java:21)</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">Caught LoggingException</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure></p><p>假如假如要捕获已有的代码的异常，就需要在异常处理中生成日志消息：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.logging.*;</span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LoggingExceptions2</span></span>&#123;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> Logger logger=Logger.getLogger(<span class="string">"LoggerExceptions2"</span>);</span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">logException</span><span class="params">(Exception e)</span></span>&#123;</span><br><span class="line">StringWriter trace=<span class="keyword">new</span> StringWriter();</span><br><span class="line">e.printStackTrace(<span class="keyword">new</span> PrintWriter(trace));</span><br><span class="line">logger.severe(trace.toString());</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line"><span class="keyword">try</span>&#123;</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> NullPointerException();</span><br><span class="line">&#125;<span class="keyword">catch</span>(NullPointerException e)&#123;</span><br><span class="line">logException(e);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;<span class="comment">/*Output:</span></span><br><span class="line"><span class="comment">9月 13, 2018 10:53:21 上午 LoggingExceptions2 logException</span></span><br><span class="line"><span class="comment">严重: java.lang.NullPointerException</span></span><br><span class="line"><span class="comment">        at LoggingExceptions2.main(LoggingExceptions2.java:13)</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure></p><p> 核心就是在异常处理程序中调用一个方法，以异常为参数，输出日志。（不同于上一个例子，<code>static void logException(Exception e)</code>这里是以异常为参数的。）<br><a href="https://github.com/chaoxz2/Thinking-in-Java-4th-/blob/master/exercise/%E9%80%9A%E8%BF%87%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86%E9%94%99%E8%AF%AF/ExtraFeatures.java">教材示例</a></p><hr><h3 id="4-异常说明"><a href="#4-异常说明" class="headerlink" title="4.异常说明"></a>4.异常说明</h3><p>异常说明使用了关键字throws，后面接一个所有潜在异常类型的列表。看起来像这样：<code>void f() throws MyExceptionA,MyExceptionB{}</code>如果没有异常说明如<code>void f(){}</code>就不能抛出任何异常(只有RuntimeException及其子类可以被抛出)。<br>可以声明方法将抛出异常，但实际并不抛出。</p><hr><h3 id="5-捕获所有异常"><a href="#5-捕获所有异常" class="headerlink" title="5. 捕获所有异常"></a>5. 捕获所有异常</h3><p>可以只写一个异常处理程序来捕获所有异常，通过捕获异常类型的基类Exception就可以做到这一点。（最好放在处理程序列表的列尾，防止它抢在其他异常处理程序之前将异常捕获，得不到更加准确的关于异常的信息和处理）</p><h4 id="1-栈轨迹"><a href="#1-栈轨迹" class="headerlink" title="1. 栈轨迹"></a>1. 栈轨迹</h4><p>printStackTrace()提供的信息可以供getStackTrace()访问，这个方法将返回一个由栈轨迹中的元素（StackTraceElement）组成的数组，每一个元素都表示栈中的一帧。元素0是栈顶元素，并且是调用序列中的最后一个方法调用（这个Throwable被创建和抛出之处）。数组中最后一个元素和栈底是调用序列中的第一个方法调用。例：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">f</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">try</span>&#123;</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> Exception();</span><br><span class="line">&#125;<span class="keyword">catch</span>(Exception e)&#123;</span><br><span class="line"><span class="keyword">for</span>(StackTraceElement ste:e.getStackTrace())</span><br><span class="line">System.out.println(ste.getMethodName());</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">g</span><span class="params">()</span></span>&#123;</span><br><span class="line">f();</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">h</span><span class="params">()</span></span>&#123;</span><br><span class="line">g();</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">h();</span><br><span class="line">&#125;</span><br><span class="line">&#125;<span class="comment">/*Output:</span></span><br><span class="line"><span class="comment">f</span></span><br><span class="line"><span class="comment">g</span></span><br><span class="line"><span class="comment">h</span></span><br><span class="line"><span class="comment">main</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure></p><p><a href="https://github.com/chaoxz2/Thinking-in-Java-4th-/blob/master/exercise/%E9%80%9A%E8%BF%87%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86%E9%94%99%E8%AF%AF/WhoCalled.java">教材示例</a></p><h4 id="2-重新抛出异常"><a href="#2-重新抛出异常" class="headerlink" title="2.重新抛出异常"></a>2.重新抛出异常</h4><h5 id="1-抛出原异常"><a href="#1-抛出原异常" class="headerlink" title="1. 抛出原异常"></a>1. 抛出原异常</h5><p>重新抛出异常会把异常抛给上一级环境中的异常处理程序，同一个try块的后续catch子句将被忽略。此外，异常对象的所有信息都将得以保持，所以高一级捕获此异常的的异常处理程序可以从这个异常对象中得到所有信息。如果只是把当前异常对象重新抛出，printStackTrace()显示的是原来异常抛出点的调用栈信息，并非重新抛出点的信息。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">catch</span>(Exception e)&#123;</span><br><span class="line">System.out.println(<span class="string">"Anexception was thrown"</span>);</span><br><span class="line"><span class="keyword">throw</span> e;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>要想更新这个信息，可以调用fillInStackTrace()，将返回一个Throwable对象，把当前调用栈信息填入原来的异常对象而建立。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">catch</span>(Exception e)&#123;</span><br><span class="line">System.out.println(<span class="string">"Anexception was thrown"</span>);</span><br><span class="line"><span class="keyword">throw</span> (Exception)e.fillInStackTrace();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><a href="https://github.com/chaoxz2/Thinking-in-Java-4th-/blob/master/exercise/%E9%80%9A%E8%BF%87%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86%E9%94%99%E8%AF%AF/Rethrowing.java">教材示例</a></p><h5 id="2-抛出新异常"><a href="#2-抛出新异常" class="headerlink" title="2.抛出新异常"></a>2.抛出新异常</h5><p>在捕获一场之后抛出新异常得到的效果类似于使用fillInStackTrace()，有关原异常点的信息会丢失，剩下的是与新抛出点有关的信息。<a href="https://github.com/chaoxz2/Thinking-in-Java-4th-/blob/master/exercise/%E9%80%9A%E8%BF%87%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86%E9%94%99%E8%AF%AF/RethrowNew.java">教材示例</a></p><h5 id="3-异常链"><a href="#3-异常链" class="headerlink" title="3. 异常链"></a>3. 异常链</h5><p>常常会想要在捕获一个异常后抛出另一个异常，并希望把原始的异常信息保存下来，这被称为异常链。现在所有的Throwable子类在构造器中都能接受一个cause对象作为参数。这个cause就用来表示原始异常，这样通过原始异常传递给新的异常，使得即使在当前位置创建并抛出了新的异常，也能通过这个异常链追踪到异常最初的发生位置。<br>在Throwable子类中，只有三种基本的异常类提供了带cause参数的构造器，它们是Error、Exception和RuntimeException。如果要把其他类型的异常链接起来，应该使用initCause()方法而不是构造器。<a href="https://github.com/chaoxz2/Thinking-in-Java-4th-/blob/master/exercise/%E9%80%9A%E8%BF%87%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86%E9%94%99%E8%AF%AF/DynamicFields.java">教材示例</a><br>简单示例如下：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test234</span></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line"><span class="keyword">try</span>&#123;</span><br><span class="line"><span class="keyword">try</span>&#123;</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> Exception();</span><br><span class="line">&#125;<span class="keyword">catch</span>(Exception e)&#123;</span><br><span class="line">System.out.println(<span class="string">"Caught: "</span>+e);</span><br><span class="line">e.printStackTrace();</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(e);</span><br><span class="line">&#125;</span><br><span class="line">&#125;<span class="keyword">catch</span>(RuntimeException ee)&#123;</span><br><span class="line">System.out.println(<span class="string">"Caught: "</span>+ee);</span><br><span class="line">ee.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;<span class="comment">/*Output:</span></span><br><span class="line"><span class="comment">Caught: java.lang.Exception</span></span><br><span class="line"><span class="comment">java.lang.Exception</span></span><br><span class="line"><span class="comment">        at Test234.main(Test234.java:5)</span></span><br><span class="line"><span class="comment">Caught: java.lang.RuntimeException: java.lang.Exception</span></span><br><span class="line"><span class="comment">java.lang.RuntimeException: java.lang.Exception</span></span><br><span class="line"><span class="comment">        at Test234.main(Test234.java:9)</span></span><br><span class="line"><span class="comment">Caused by: java.lang.Exception</span></span><br><span class="line"><span class="comment">        at Test234.main(Test234.java:5)</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure></p><hr><h3 id="6-Java标准异常"><a href="#6-Java标准异常" class="headerlink" title="6. Java标准异常"></a>6. Java标准异常</h3><p>Throwable这个Java类用来表示任何可以作为异常抛出的类。Throwable对象可以分成两种类型：Error用来表示编译时和系统错误：Exception是可以被抛出的基本类型。使用我们一般关心Exception类。<br><strong>特例：RuntimeException</strong><br>只能在代码中忽略RuntimeException（及其子类）类型的异常，其他类型异常的处理都是由编译器强制实施的。（简单说就是，异常声明只能忽略RuntimeException类和其子类，其他异常都必须说明）</p><hr><h3 id="7-异常的限制"><a href="#7-异常的限制" class="headerlink" title="7. 异常的限制"></a>7. 异常的限制</h3><p><strong>当覆盖方法时，只能抛出在基类方法的异常说明里列出的那些异常。</strong><a href="https://github.com/chaoxz2/Thinking-in-Java-4th-/blob/master/exercise/%E9%80%9A%E8%BF%87%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86%E9%94%99%E8%AF%AF/StormyInning.java">示例</a></p><ul><li>构造器：<br>父类构造器总会被子类构造器调用，所以<strong>子类构造器异常说明必须包含父类构造器的异常说明</strong>。</li><li>方法：<br>父类方法f()声明异常MyExceptionF，子类方法f()不抛出异常<br>父类方法g()声明异常MyExceptionG,子类方法g()抛出MyExceptionG的子类异常MyExceptionGA<br>父类方法h()未声明异常MyExceptionH,子类方法h()抛出异常MyExceptionH//！错误<br>子类新方法k()声明异常MyExceptionK</li><li>向上转型：<br>要求捕获基类（和自身独有的异常）。</li></ul><p>示例如下：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> com.goldfish666.util.Print.*;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyExceptionA</span> <span class="keyword">extends</span> <span class="title">Exception</span></span>&#123;&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyExceptionB</span> <span class="keyword">extends</span> <span class="title">Exception</span></span>&#123;&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyExceptionG</span> <span class="keyword">extends</span> <span class="title">Exception</span></span>&#123;&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyExceptionF</span> <span class="keyword">extends</span> <span class="title">Exception</span></span>&#123;&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyExceptionH</span> <span class="keyword">extends</span> <span class="title">Exception</span></span>&#123;&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyExceptionK</span> <span class="keyword">extends</span> <span class="title">Exception</span></span>&#123;&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyExceptionGA</span> <span class="keyword">extends</span> <span class="title">MyExceptionG</span></span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Father</span></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Father</span><span class="params">()</span> <span class="keyword">throws</span> MyExceptionA</span>&#123;&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">f</span><span class="params">()</span> <span class="keyword">throws</span> MyExceptionF</span>&#123;&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">g</span><span class="params">()</span> <span class="keyword">throws</span> MyExceptionG</span>&#123;&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">h</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Son</span> <span class="keyword">extends</span> <span class="title">Father</span></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Son</span><span class="params">()</span> <span class="keyword">throws</span> MyExceptionA,MyExceptionB</span>&#123;&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">f</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">g</span><span class="params">()</span> <span class="keyword">throws</span> MyExceptionGA</span>&#123;&#125;</span><br><span class="line"><span class="comment">//!public static void h() throws MyExceptionH&#123;&#125;</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">k</span><span class="params">()</span> <span class="keyword">throws</span> MyExceptionK</span>&#123;&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line"><span class="comment">//方法</span></span><br><span class="line"><span class="keyword">try</span>&#123;<span class="comment">//父类方法声明异常，子类方法不抛出</span></span><br><span class="line">Son son=<span class="keyword">new</span> Son();</span><br><span class="line">f();</span><br><span class="line">&#125;<span class="keyword">catch</span>(MyExceptionA e)&#123;</span><br><span class="line">println(<span class="string">"Caught MyExceptionA"</span>);</span><br><span class="line">&#125;<span class="keyword">catch</span>(MyExceptionB e)&#123;</span><br><span class="line">println(<span class="string">"Caught MyExceptionB"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span>&#123;<span class="comment">//父类方法声明异常，子类方法抛出已声明异常的子类异常</span></span><br><span class="line">Son son=<span class="keyword">new</span> Son();</span><br><span class="line">g();</span><br><span class="line">&#125;<span class="keyword">catch</span>(MyExceptionA e)&#123;</span><br><span class="line">println(<span class="string">"Caught MyExceptionA"</span>);</span><br><span class="line">&#125;<span class="keyword">catch</span>(MyExceptionB e)&#123;</span><br><span class="line">println(<span class="string">"Caught MyExceptionB"</span>);</span><br><span class="line">&#125;<span class="keyword">catch</span>(MyExceptionGA e)&#123;</span><br><span class="line">println(<span class="string">"Caught MyExceptionGA"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">try</span>&#123;<span class="comment">//父类方法不声明异常，子类方法抛出异常</span></span><br><span class="line">Son son=<span class="keyword">new</span> Son();</span><br><span class="line">h();</span><br><span class="line">&#125;<span class="keyword">catch</span>(MyExceptionA e)&#123;</span><br><span class="line">println(<span class="string">"Caught MyExceptionA"</span>);</span><br><span class="line">&#125;<span class="keyword">catch</span>(MyExceptionB e)&#123;</span><br><span class="line">println(<span class="string">"Caught MyExceptionB"</span>);</span><br><span class="line">&#125;<span class="comment">/*</span></span><br><span class="line"><span class="comment">catch(MyExceptionH e)&#123;</span></span><br><span class="line"><span class="comment">println("Caught MyExceptionH");</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">try</span>&#123;<span class="comment">//子类新方法抛出异常</span></span><br><span class="line">Son son=<span class="keyword">new</span> Son();</span><br><span class="line">k();</span><br><span class="line">&#125;<span class="keyword">catch</span>(MyExceptionA e)&#123;</span><br><span class="line">println(<span class="string">"Caught MyExceptionA"</span>);</span><br><span class="line">&#125;<span class="keyword">catch</span>(MyExceptionB e)&#123;</span><br><span class="line">println(<span class="string">"Caught MyExceptionB"</span>);</span><br><span class="line">&#125;<span class="keyword">catch</span>(MyExceptionK e)&#123;</span><br><span class="line">println(<span class="string">"Caught MyExceptionK"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//向上转型</span></span><br><span class="line"><span class="keyword">try</span>&#123;<span class="comment">//父类方法声明异常，子类方法不抛出</span></span><br><span class="line">Father son=<span class="keyword">new</span> Son();</span><br><span class="line">f();</span><br><span class="line">&#125;<span class="keyword">catch</span>(MyExceptionA e)&#123;</span><br><span class="line">println(<span class="string">"Caught MyExceptionA"</span>);</span><br><span class="line">&#125;<span class="keyword">catch</span>(MyExceptionB e)&#123;</span><br><span class="line">println(<span class="string">"Caught MyExceptionB"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span>&#123;<span class="comment">//父类方法声明异常，子类方法抛出已声明异常的子类异常</span></span><br><span class="line">Father son=<span class="keyword">new</span> Son();</span><br><span class="line">g();</span><br><span class="line">&#125;<span class="keyword">catch</span>(MyExceptionA e)&#123;</span><br><span class="line">println(<span class="string">"Caught MyExceptionA"</span>);</span><br><span class="line">&#125;<span class="keyword">catch</span>(MyExceptionB e)&#123;</span><br><span class="line">println(<span class="string">"Caught MyExceptionB"</span>);</span><br><span class="line">&#125;<span class="keyword">catch</span>(MyExceptionG e)&#123;</span><br><span class="line">println(<span class="string">"Caught MyExceptionGA"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">try</span>&#123;<span class="comment">//父类方法不声明异常，子类方法抛出异常</span></span><br><span class="line">Father son=<span class="keyword">new</span> Son();</span><br><span class="line">h();</span><br><span class="line">&#125;<span class="keyword">catch</span>(MyExceptionA e)&#123;</span><br><span class="line">println(<span class="string">"Caught MyExceptionA"</span>);</span><br><span class="line">&#125;<span class="keyword">catch</span>(MyExceptionB e)&#123;</span><br><span class="line">println(<span class="string">"Caught MyExceptionB"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*catch(MyExceptionH e)&#123;</span></span><br><span class="line"><span class="comment">println("Caught MyExceptionH");</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">try</span>&#123;<span class="comment">//子类新方法抛出异常</span></span><br><span class="line">Father son=<span class="keyword">new</span> Son();</span><br><span class="line">k();</span><br><span class="line">&#125;<span class="keyword">catch</span>(MyExceptionA e)&#123;</span><br><span class="line">println(<span class="string">"Caught MyExceptionA"</span>);</span><br><span class="line">&#125;<span class="keyword">catch</span>(MyExceptionB e)&#123;</span><br><span class="line">println(<span class="string">"Caught MyExceptionB"</span>);</span><br><span class="line">&#125;<span class="keyword">catch</span>(MyExceptionK e)&#123;</span><br><span class="line">println(<span class="string">"Caught MyExceptionK"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><hr><h3 id="8-构造器"><a href="#8-构造器" class="headerlink" title="8. 构造器"></a>8. 构造器</h3><p>主要是构造过程中出现异常的处理，如果构造器在执行过程中半途而废，也许该对象的某些部分还没有被成功的创建，而这些部分在finally子句中却是要被清理的。<br><strong>对于在构造阶段可能会抛出异常，并且要求清理的类，最安全的使用方式是使用嵌套的try子句</strong><br>例：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ConstractionException</span> <span class="keyword">extends</span> <span class="title">Exception</span></span>&#123;&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DisposeException</span> <span class="keyword">extends</span> <span class="title">Exception</span></span>&#123;&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Te</span></span>&#123;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">long</span> counter=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">long</span> id;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Te</span><span class="params">()</span></span>&#123;<span class="comment">//构造器不会抛出异常</span></span><br><span class="line"><span class="keyword">this</span>.id=counter++;</span><br><span class="line">System.out.println(<span class="string">"Te Constructor "</span>+id);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">dispose</span><span class="params">()</span></span>&#123;</span><br><span class="line">System.out.println(<span class="string">"Te "</span>+id+<span class="string">" disposed"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Ae</span></span>&#123;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">long</span> counter=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">long</span> id;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Ae</span><span class="params">()</span> <span class="keyword">throws</span> ConstractionException</span>&#123;<span class="comment">//构造器可能会抛出异常</span></span><br><span class="line"><span class="keyword">this</span>.id=counter++;</span><br><span class="line">System.out.println(<span class="string">"Ae Constructor "</span>+id);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">play</span><span class="params">()</span></span>&#123;</span><br><span class="line">System.out.println(<span class="string">"Good Job"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">dispose</span><span class="params">()</span><span class="keyword">throws</span> DisposeException</span>&#123;<span class="comment">//清理方法可能抛出异常</span></span><br><span class="line">System.out.println(<span class="string">"Ae "</span>+id+<span class="string">" disposed"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">dplay</span><span class="params">()</span></span>&#123;</span><br><span class="line">System.out.println(<span class="string">"Ae "</span>+id+<span class="string">" dplay in finally"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test24</span></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line"><span class="comment">//构造器和清理方法都不会抛出异常：</span></span><br><span class="line">Te te1=<span class="keyword">new</span> Te();</span><br><span class="line">Te te2=<span class="keyword">new</span> Te();</span><br><span class="line"><span class="keyword">try</span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;<span class="keyword">finally</span>&#123;</span><br><span class="line">te2.dispose();</span><br><span class="line">te1.dispose();</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//构造器和清理方法可能抛出异常：</span></span><br><span class="line"><span class="keyword">try</span>&#123;</span><br><span class="line">Ae ae=<span class="keyword">new</span> Ae();</span><br><span class="line"><span class="keyword">try</span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;<span class="keyword">finally</span>&#123;</span><br><span class="line"><span class="keyword">try</span>&#123;</span><br><span class="line">ae.play();</span><br><span class="line"><span class="comment">//ae.dispose();1</span></span><br><span class="line"><span class="comment">//throw new DisposeException(); 2</span></span><br><span class="line">&#125;<span class="keyword">catch</span>(DisposeException e)&#123;</span><br><span class="line">System.out.println(e);</span><br><span class="line">&#125;<span class="keyword">finally</span>&#123;</span><br><span class="line">ae.dplay();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;<span class="keyword">catch</span>(ConstractionException e)&#123;</span><br><span class="line">System.out.println(e);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*有1无2（清理方法未抛出异常）：</span></span><br><span class="line"><span class="comment">Te Constructor 1</span></span><br><span class="line"><span class="comment">Te Constructor 2</span></span><br><span class="line"><span class="comment">Te 2 disposed</span></span><br><span class="line"><span class="comment">Te 1 disposed</span></span><br><span class="line"><span class="comment">Ae Constructor 1</span></span><br><span class="line"><span class="comment">Good Job</span></span><br><span class="line"><span class="comment">Ae 1 disposed</span></span><br><span class="line"><span class="comment">DisposeException</span></span><br><span class="line"><span class="comment">Ae 1 dplay in finally</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="comment">/*有2无1（清理方法抛出异常）：</span></span><br><span class="line"><span class="comment">Te Constructor 1</span></span><br><span class="line"><span class="comment">Te Constructor 2</span></span><br><span class="line"><span class="comment">Te 2 disposed</span></span><br><span class="line"><span class="comment">Te 1 disposed</span></span><br><span class="line"><span class="comment">Ae Constructor 1</span></span><br><span class="line"><span class="comment">Good Job</span></span><br><span class="line"><span class="comment">Ae 1 dplay in finally</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure></p><p>核心代码是嵌套的try块：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Construction</span></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Construction</span><span class="params">()</span> <span class="keyword">throws</span> ConstructionException</span>&#123;</span><br><span class="line"><span class="comment">//...构造器描述</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">f</span><span class="params">()</span> <span class="keyword">throws</span> MethodException</span>&#123;</span><br><span class="line"><span class="comment">//...方法描述</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">disposeInFinally</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="comment">//...清理方法</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line"><span class="keyword">try</span>&#123;<span class="comment">//外层try块，如果构造过程抛出异常跳到25行的异常处理程序</span></span><br><span class="line">Construction con=<span class="keyword">new</span> Construction();</span><br><span class="line"><span class="keyword">try</span>&#123;<span class="comment">//内层try块，在构造器成功完成构造后起作用</span></span><br><span class="line">con.f();<span class="comment">//既是为了实现程序的目标，也是为了最后用finally清理</span></span><br><span class="line">&#125;<span class="keyword">catch</span>(MethodException me)&#123;</span><br><span class="line"><span class="comment">//...f()方法异常的异常处理程序</span></span><br><span class="line">&#125;<span class="keyword">finally</span>&#123;</span><br><span class="line">f.disposeInFinally();<span class="comment">//清理对象con</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;<span class="keyword">catch</span>(ConstructionException ce)&#123;</span><br><span class="line"><span class="comment">//...构造器异常的异常处理程序</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>对于构造器可能抛出异常的构造过程，这样写可以应对所有情况：<br>如果构造过程没有抛出异常，那么就继续对创建的对象进行操作，然后在finally子句里进行清理；<br>如果构造过程抛出异常，那么程序会跳过之后的“对对象进行操作和清理”，直接转到构造器异常的异常处理程序。</p><hr><h3 id="9-异常匹配"><a href="#9-异常匹配" class="headerlink" title="9. 异常匹配"></a>9. 异常匹配</h3><p>抛出异常的时候，异常处理系统会按照代码的书写顺序找出“最近”的处理程序，找到匹配的处理程序之后，它就认为异常将得到处理，不再继续查找。（<strong>使用最近的匹配的异常处理程序处理异常</strong>）<br>查找的时候并不要要求抛出的异常同异常处理程序声明的异常完全匹配。派生类的对象也可以匹配其基类的处理程序。（<strong>不要求完全匹配，子类异常的对象可以被父类异常的异常处理程序捕获（匹配）</strong>）<br>例：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ExcepA</span> <span class="keyword">extends</span> <span class="title">Exception</span></span>&#123;&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ExcepAA</span> <span class="keyword">extends</span> <span class="title">ExcepA</span></span>&#123;&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ExcepAAA</span> <span class="keyword">extends</span> <span class="title">ExcepAA</span></span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">play</span><span class="params">()</span><span class="keyword">throws</span> ExcepA</span>&#123;</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> ExcepA();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AA</span> <span class="keyword">extends</span> <span class="title">A</span></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">play</span><span class="params">()</span> <span class="keyword">throws</span> ExcepAA</span>&#123;</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> ExcepAA();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AAA</span> <span class="keyword">extends</span> <span class="title">AA</span></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">play</span><span class="params">()</span> <span class="keyword">throws</span> ExcepAAA</span>&#123;</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> ExcepAAA();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">A a=<span class="keyword">new</span> AAA();<span class="comment">//AAA a=new AAA()也可以，不过编译会有警告</span></span><br><span class="line"><span class="keyword">try</span>&#123;</span><br><span class="line">a.play();</span><br><span class="line">&#125;<span class="keyword">catch</span>(ExcepAAA x)&#123;</span><br><span class="line">System.out.println(<span class="string">"Caught ExcepAAA"</span>);</span><br><span class="line">&#125;<span class="keyword">catch</span>(ExcepAA x)&#123;</span><br><span class="line">System.out.println(<span class="string">"Caught ExcepAA"</span>);</span><br><span class="line">&#125;<span class="keyword">catch</span>(ExcepA x)&#123;</span><br><span class="line">System.out.println(<span class="string">"Caught ExcepA"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">try</span>&#123;</span><br><span class="line">a.play();</span><br><span class="line">&#125;<span class="keyword">catch</span>(ExcepAA x)&#123;</span><br><span class="line">System.out.println(<span class="string">"Caught ExcepAA"</span>);</span><br><span class="line">&#125;<span class="keyword">catch</span>(ExcepA x)&#123;</span><br><span class="line">System.out.println(<span class="string">"Caught ExcepA"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">try</span>&#123;</span><br><span class="line">a.play();</span><br><span class="line">&#125;<span class="keyword">catch</span>(ExcepA x)&#123;</span><br><span class="line">System.out.println(<span class="string">"Caught ExcepA"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;<span class="comment">/*Output:</span></span><br><span class="line"><span class="comment">Caught ExcepAAA</span></span><br><span class="line"><span class="comment">Caught ExcepAA</span></span><br><span class="line"><span class="comment">Caught ExcepA</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure></p><hr><h3 id="10-其他可选方式"><a href="#10-其他可选方式" class="headerlink" title="10. 其他可选方式"></a>10. 其他可选方式</h3><p>异常代表了当前方法不能继续执行的情况，开发异常处理的初衷是为了方便程序员处理错误。异常处理的一个重要原则是“只有在你知道如何处理的情况下才捕获异常”，实际上异常处理的一个重要目标就是<strong>把<em>错误处理的代码</em>和<em>错误发生的地点</em>相分离</strong>。<br>“被检查的异常”使这个问题变得有些复杂，它们强制你在没有准备好处理错误的时候加上catch子句，导致“harmful if swallowed”问题（无意间“吞食”了异常，导致异常丢失）。</p><h4 id="1-把异常传给控制台"><a href="#1-把异常传给控制台" class="headerlink" title="1. 把异常传给控制台"></a>1. 把异常传给控制台</h4><p>main()作为一个方法也可以有异常说明，声明可能抛出所有异常的父类Exception。通过把它传到控制台，就不必在main()里写try-catch子句了。例：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ExcepA</span> <span class="keyword">extends</span> <span class="title">Exception</span></span>&#123;&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Testlee0</span></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">f</span><span class="params">()</span> <span class="keyword">throws</span> ExcepA</span>&#123;</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> ExcepA();</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">f();</span><br><span class="line">&#125;</span><br><span class="line">&#125;<span class="comment">/*Output:</span></span><br><span class="line"><span class="comment">Exception in thread "main" ExcepA</span></span><br><span class="line"><span class="comment">        at Testlee0.f(Testlee0.java:4)</span></span><br><span class="line"><span class="comment">        at Testlee0.main(Testlee0.java:7)</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure></p><h4 id="2-把“被检查的异常”转换为“不检查的异常”"><a href="#2-把“被检查的异常”转换为“不检查的异常”" class="headerlink" title="2. 把“被检查的异常”转换为“不检查的异常”"></a>2. 把“被检查的异常”转换为“不检查的异常”</h4><p>从main()中抛出异常很方便，但是不是通用的方法，因为问题的实质是，当在一个普通方法里调用别的方法时，要考虑到“我不知道该怎么处理这个异常，但是也不想把它‘吞’了，或者打印一些无用的消息”。<br>异常链给了一种思路来解决这个问题：把“被检查的异常”包装进RuntimeException里，这样就<strong>不必进行异常说明，也不用担心异常丢失，异常链还保证不会丢失任何原始异常的信息。</strong></p><h5 id="1-对于系统自带的异常类："><a href="#1-对于系统自带的异常类：" class="headerlink" title="1. 对于系统自带的异常类："></a>1. 对于系统自带的异常类：</h5><ul><li>抛出异常，异常处理程序里以该异常为参数抛出RuntimeException()构建异常链；</li><li>捕获RuntimeException异常，在它的异常处理程序里使用<strong>getCause()</strong>方法抛出异常；</li><li>尝试捕捉该异常，进行处理。<br>例：<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//对于已有的异常类</span></span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Pack</span></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">throwRuntimeException</span><span class="params">(<span class="keyword">int</span> type)</span></span>&#123;</span><br><span class="line"><span class="keyword">try</span>&#123;</span><br><span class="line"><span class="keyword">switch</span>(type)&#123;</span><br><span class="line"><span class="keyword">case</span> <span class="number">0</span>: <span class="keyword">throw</span> <span class="keyword">new</span> IOException();</span><br><span class="line"><span class="keyword">case</span> <span class="number">1</span>:<span class="keyword">throw</span> <span class="keyword">new</span> FileNotFoundException();</span><br><span class="line"><span class="keyword">case</span> <span class="number">2</span>:<span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"Where am I"</span>);</span><br><span class="line"><span class="keyword">default</span>:<span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;<span class="keyword">catch</span>(Exception e)&#123;</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(e);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">Pack pa=<span class="keyword">new</span> Pack();</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">3</span>;i++)</span><br><span class="line"><span class="keyword">try</span>&#123;</span><br><span class="line">pa.throwRuntimeException(i);</span><br><span class="line">&#125;<span class="keyword">catch</span>(RuntimeException re)&#123;</span><br><span class="line"><span class="keyword">try</span>&#123;</span><br><span class="line"><span class="keyword">throw</span> re.getCause();</span><br><span class="line">&#125;<span class="keyword">catch</span>(FileNotFoundException e)&#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;<span class="keyword">catch</span>(IOException e)&#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;<span class="keyword">catch</span>(Throwable e)&#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;<span class="comment">/*Output:</span></span><br><span class="line"><span class="comment">java.io.IOException</span></span><br><span class="line"><span class="comment">        at Pack.throwRuntimeException(Test.java:6)</span></span><br><span class="line"><span class="comment">        at Test.main(Test.java:21)</span></span><br><span class="line"><span class="comment">java.io.FileNotFoundException</span></span><br><span class="line"><span class="comment">        at Pack.throwRuntimeException(Test.java:7)</span></span><br><span class="line"><span class="comment">        at Test.main(Test.java:21)</span></span><br><span class="line"><span class="comment">java.lang.RuntimeException: Where am I</span></span><br><span class="line"><span class="comment">        at Pack.throwRuntimeException(Test.java:8)</span></span><br><span class="line"><span class="comment">        at Test.main(Test.java:21)</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure></li></ul><h5 id="2-对于自定义的异常类，让它继承自RuntimeException-甚至可以省去try-catch。"><a href="#2-对于自定义的异常类，让它继承自RuntimeException-甚至可以省去try-catch。" class="headerlink" title="2. 对于自定义的异常类，让它继承自RuntimeException,甚至可以省去try-catch。"></a>2. 对于自定义的异常类，让它继承自RuntimeException,甚至可以省去try-catch。</h5><p>例：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyException</span> <span class="keyword">extends</span> <span class="title">RuntimeException</span></span>&#123;&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">f</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> MyException();</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">f();</span><br><span class="line">&#125;</span><br><span class="line">&#125;<span class="comment">/*Output:</span></span><br><span class="line"><span class="comment">Exception in thread "main" MyException</span></span><br><span class="line"><span class="comment">        at Test.f(Test.java:5)</span></span><br><span class="line"><span class="comment">        at Test.main(Test.java:8)</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure></p>]]></content>
      
      
        <tags>
            
            <tag> 异常 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>流程图测试</title>
      <link href="/2018/09/01/%E6%B5%81%E7%A8%8B%E5%9B%BE%E6%B5%8B%E8%AF%95/"/>
      <url>/2018/09/01/%E6%B5%81%E7%A8%8B%E5%9B%BE%E6%B5%8B%E8%AF%95/</url>
      <content type="html"><![CDATA[<figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">graph TD</span><br><span class="line">    <span class="literal">Start</span> --&gt; <span class="literal">Stop</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
    </entry>
    
    <entry>
      <title>Map的排序</title>
      <link href="/2018/08/31/Map%E7%9A%84%E6%8E%92%E5%BA%8F/"/>
      <url>/2018/08/31/Map%E7%9A%84%E6%8E%92%E5%BA%8F/</url>
      <content type="html"><![CDATA[<p>在对Map排序时学到了一种新的排序方式，那就是利用Map.Entry类和Collections.sort()方法排序。通过Map.Entry类创建一个能储存对应Map所有信息的ArrayList。把”对Map排序”问题转化为”对Collection排序”.<a href="http://tool.oschina.net/apidocs/apidoc?api=jdk-zh">参考链接</a></p><hr><h3 id="1-实例"><a href="#1-实例" class="headerlink" title="1. 实例"></a>1. 实例</h3><p>在《Java编程思想（第四版）》持有对象这一章中，有这样一个题，要求按照值对Map排序：</p><blockquote><p>26.拿到前一个练习中所产生的Map,并按照它们在最初的文件中出现的顺序重新创建单词顺序.</p></blockquote><p>前一个题为:</p><blockquote><p>25.创建一个Map&lt; String,List&lt; Integer&gt;&gt;,使用net.mindview.TextFile来打开一个文本文件,并一次读入一个单词(用”\W+”作为TextFile构造器的第二个参数).在读入单词时对它们进行计数,并且对于文件中的每一个单词,都在List<Integer>中记录下与这个词相关联的单词计数.实际上,它记录的是该单词在文件中被发现的位置.</p></blockquote><p>这样看来就是要创建一个Map&lt;String,List&lt;Integer&gt;&gt;,然后依据List&lt;Integer&gt;的第一项对Map排序.第25题代码如下:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"><span class="keyword">import</span> net.mindview.util.*;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BackEx1125</span></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">Map&lt;String,ArrayList&lt;Integer&gt;&gt; map=<span class="keyword">new</span> LinkedHashMap&lt;String,ArrayList&lt;Integer&gt;&gt;();</span><br><span class="line">List&lt;String&gt; list=<span class="keyword">new</span> ArrayList&lt;String&gt;(<span class="keyword">new</span> TextFile(<span class="string">"SetOperations.java"</span>,<span class="string">"\\W+"</span>));</span><br><span class="line">Set&lt;String&gt; set=<span class="keyword">new</span> TreeSet&lt;String&gt;(list);</span><br><span class="line"><span class="keyword">for</span>(String x:set)&#123;</span><br><span class="line">ArrayList&lt;Integer&gt;ar=<span class="keyword">new</span> ArrayList&lt;Integer&gt;();</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;list.size();i++)&#123;</span><br><span class="line"><span class="keyword">if</span>(x.equals(list.get(i)))&#123;</span><br><span class="line">ar.add(i);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">map.put(x,ar);</span><br><span class="line">&#125;</span><br><span class="line">System.out.print(map);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>要在这个基础上以Map的值(List&lt;Integer&gt;)的第一项为依据排序,使用Map.Entry类和Collections.sort()方法排序的话就需要:</p><ol><li><p>创建一个List&lt;Map.Entry&lt;String,List&lt;Integer&gt;&gt;&gt; list:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">List&lt;Map.Entry&lt;String,ArrayList&lt;Integer&gt;&gt;&gt; list1=<span class="keyword">new</span> ArrayList&lt;Map.Entry&lt;String,ArrayList&lt;Integer&gt;&gt;&gt;(map.entrySet());</span><br></pre></td></tr></table></figure></li><li><p>用Collections.sort()对list排序(重写其compare()方法);</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">Collections.sort(list1,<span class="keyword">new</span> Comparator&lt;Map.Entry&lt;String,ArrayList&lt;Integer&gt;&gt;&gt;()&#123;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compare</span><span class="params">(Entry&lt;String,ArrayList&lt;Integer&gt;&gt; o1,Entry&lt;String,ArrayList&lt;Integer&gt;&gt; o2)</span></span>&#123;</span><br><span class="line">ArrayList ar1=(ArrayList)o1.getValue();</span><br><span class="line">ArrayList ar2=(ArrayList)o2.getValue();</span><br><span class="line">Integer aar1=(Integer)ar1.get(<span class="number">0</span>);</span><br><span class="line">Integer aar2=(Integer)ar2.get(<span class="number">0</span>);</span><br><span class="line"><span class="keyword">return</span> aar1.compareTo(aar2);</span><br><span class="line">&#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></li><li><p>创建新的LinkedHashMap&lt;String,List&lt;Integer&gt;&gt;以储存排序后的Map:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Map&lt;String,ArrayList&lt;Integer&gt;&gt;sortMap=<span class="keyword">new</span> LinkedHashMap&lt;String,ArrayList&lt;Integer&gt;&gt;();</span><br><span class="line"><span class="keyword">for</span>(Map.Entry&lt;String,ArrayList&lt;Integer&gt;&gt; mapping:list1)&#123;</span><br><span class="line">ArrayList ar3=(ArrayList)mapping.getValue();</span><br><span class="line">sortMap.put(mapping.getKey(),ar3);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><p>完整程序为:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> net.mindview.util.*;</span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.Collections;</span><br><span class="line"><span class="keyword">import</span> java.util.Comparator;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"><span class="keyword">import</span> java.util.Map.Entry;</span><br><span class="line"><span class="keyword">import</span> java.util.TreeMap;</span><br><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BackEx1126</span></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">Map&lt;String,ArrayList&lt;Integer&gt;&gt; map=<span class="keyword">new</span> LinkedHashMap&lt;String,ArrayList&lt;Integer&gt;&gt;();</span><br><span class="line">List&lt;String&gt; list=<span class="keyword">new</span> ArrayList&lt;String&gt;(<span class="keyword">new</span> TextFile(<span class="string">"SetOperations.java"</span>,<span class="string">"\\W+"</span>));</span><br><span class="line">Set&lt;String&gt; set=<span class="keyword">new</span> TreeSet&lt;String&gt;(list);</span><br><span class="line"><span class="keyword">for</span>(String x:set)&#123;</span><br><span class="line">ArrayList&lt;Integer&gt;ar=<span class="keyword">new</span> ArrayList&lt;Integer&gt;();</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;list.size();i++)&#123;</span><br><span class="line"><span class="keyword">if</span>(x.equals(list.get(i)))&#123;</span><br><span class="line">ar.add(i);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">map.put(x,ar);</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(<span class="string">"map: "</span>+map);</span><br><span class="line">System.out.println();</span><br><span class="line"></span><br><span class="line">List&lt;Map.Entry&lt;String,ArrayList&lt;Integer&gt;&gt;&gt; list1=<span class="keyword">new</span> ArrayList&lt;Map.Entry&lt;String,ArrayList&lt;Integer&gt;&gt;&gt;(map.entrySet());</span><br><span class="line">Collections.sort(list1,<span class="keyword">new</span> Comparator&lt;Map.Entry&lt;String,ArrayList&lt;Integer&gt;&gt;&gt;()&#123;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compare</span><span class="params">(Entry&lt;String,ArrayList&lt;Integer&gt;&gt; o1,Entry&lt;String,ArrayList&lt;Integer&gt;&gt; o2)</span></span>&#123;</span><br><span class="line">ArrayList ar1=(ArrayList)o1.getValue();</span><br><span class="line">ArrayList ar2=(ArrayList)o2.getValue();</span><br><span class="line">Integer aar1=(Integer)ar1.get(<span class="number">0</span>);</span><br><span class="line">Integer aar2=(Integer)ar2.get(<span class="number">0</span>);</span><br><span class="line"><span class="keyword">return</span> aar1.compareTo(aar2);</span><br><span class="line">&#125;</span><br><span class="line">&#125;);</span><br><span class="line">System.out.println(<span class="string">"list1: "</span>+list1);</span><br><span class="line">System.out.println();</span><br><span class="line">Map&lt;String,ArrayList&lt;Integer&gt;&gt;sortMap=<span class="keyword">new</span> LinkedHashMap&lt;String,ArrayList&lt;Integer&gt;&gt;();</span><br><span class="line"><span class="keyword">for</span>(Map.Entry&lt;String,ArrayList&lt;Integer&gt;&gt; mapping:list1)&#123;</span><br><span class="line">ArrayList ar3=(ArrayList)mapping.getValue();</span><br><span class="line">sortMap.put(mapping.getKey(),ar3);</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(<span class="string">"sortMap: "</span>+sortMap);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>排序过程创建一个ArrayList，一个LinkedHashMap。</p><hr><h3 id="2-Map-Entry排序方法详解"><a href="#2-Map-Entry排序方法详解" class="headerlink" title="2. Map.Entry排序方法详解"></a>2. Map.Entry排序方法详解</h3><p>通过实例不难看出,使用这种方法(Map.Entry+Collections.sort())排序有三个步骤:</p><p><div id="flowchart-0" class="flow-chart"></div><br>涉及到的东西有:Collections.sort(),Comparator.compare(),compareTo().<br><strong>Collections.sort()</strong>:</p><blockquote><p>sort<br>public static <T> void sort(List<T> list,Comparator&lt;? super T&gt; c)<br>    根据指定比较器产生的顺序对指定列表进行排序。此列表内的所有元素都必须可使用指定比较器 相互比较（也就是说，对于列表中的任意 e1 和 e2 元素， c.compare(e1, e2) 不得抛出 ClassCastException）。<br>    此排序被保证是稳定的：不会因调用 sort 而对相等的元素进行重新排序。<br>    排序算法是一个经过修改的合并排序算法（其中，如果低子列表中的最高元素小于高子列表中的最低元素，则忽略合并）。此算法提供可保证的 n log(n) 性能。 指定列表必须是可修改的，但不必是可大小调整的。此实现将指定列表转储到一个数组中，并对数组进行排序，在重置数组中相应位置每个元素的列表上进行迭代。这避免了由于试图原地对链接列表进行排序而产生的 n2 log(n) 性能。<br>    参数：<br>        list - 要排序的列表。<br>        c - 确定列表顺序的比较器。 null 值指示应该使用元素的 自然顺序。<br>    抛出：<br>        ClassCastException - 如果列表中包含不可使用指定比较器 相互比较 的元素。<br>        UnsupportedOperationException - 如果指定列表的列表迭代器不支持 set 操作。</p></blockquote><p> 这是<a href="http://tool.oschina.net/apidocs/apidoc?api=jdk-zh">Java API文档</a> 上查到的信息,我们可以看到Collections.sort()作用就是根据参数c(排序规则)对另一个参数list进行排序(其实实现Collections.sort()还有另外一种方法就是让类实现Comparable排序接口).那么排序规则呢?<br> <strong>Comparator.compare()</strong>:</p><blockquote><p> compare<br>int compare(T o1,T o2)<br>    比较用来排序的两个参数。根据第一个参数小于、等于或大于第二个参数分别返回负整数、零或正整数。<br>    在前面的描述中，符号 sgn(expression) 表示 signum 数学函数，根据 expression 的值为负数、0 还是正数，该函数分别返回 -1、0 或 1。<br>    实现程序必须确保对于所有的 x 和 y 而言，都存在 sgn(compare(x, y)) == -sgn(compare(y, x))。（这意味着当且仅当 compare(y, x) 抛出异常时 compare(x, y) 才必须抛出异常。）<br>    实现程序还必须确保关系是可传递的：((compare(x, y)&gt;0) &amp;&amp; (compare(y, z)&gt;0)) 意味着 compare(x, z)&gt;0。<br>    最后，实现程序必须确保 compare(x, y)==0 意味着对于所有的 z 而言，都存在 sgn(compare(x, z))==sgn(compare(y, z))。<br>    虽然这种情况很普遍，但并不 严格要求 (compare(x, y)==0) == (x.equals(y))。一般说来，任何违背这个条件的 Comparator 都应该清楚地指出这一事实。推荐的语言是“注意：此 Comparator 强行进行与 equals 不一致的排序。”<br>    参数：<br>        o1 - 要比较的第一个对象。<br>        o2 - 要比较的第二个对象。<br>    返回：<br>        根据第一个参数小于、等于或大于第二个参数分别返回负整数、零或正整数。<br>    抛出：<br>        ClassCastException - 如果参数的类型不允许此 Comparator 对它们进行比较。 </p></blockquote><p>我们使用的compare()是经过重写的,所以在这一步,我们可以自定义排序规则.在:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compare</span><span class="params">(Entry&lt;String,ArrayList&lt;Integer&gt;&gt; o1,Entry&lt;String,ArrayList&lt;Integer&gt;&gt; o2)</span></span>&#123;</span><br><span class="line">ArrayList ar1=(ArrayList)o1.getValue();</span><br><span class="line">ArrayList ar2=(ArrayList)o2.getValue();</span><br><span class="line">Integer aar1=(Integer)ar1.get(<span class="number">0</span>);</span><br><span class="line">Integer aar2=(Integer)ar2.get(<span class="number">0</span>);</span><br><span class="line"><span class="keyword">return</span> aar1.compareTo(aar2);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>中我们提取了Map的值(一个ArrayList&lt;Integer&gt;)的第一项作为排序依据,在这一步,我们可以以其他依据来排序:</p><ul><li><p><strong>按第二次出现的位置排序</strong>(遇到只出现过一次的单词会出错):</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compare</span><span class="params">(Entry&lt;String,ArrayList&lt;Integer&gt;&gt; o1,Entry&lt;String,ArrayList&lt;Integer&gt;&gt; o2)</span></span>&#123;</span><br><span class="line">ArrayList ar1=(ArrayList)o1.getValue();</span><br><span class="line">ArrayList ar2=(ArrayList)o2.getValue();</span><br><span class="line">Integer aar1=(Integer)ar1.get(<span class="number">1</span>);<span class="comment">//原为(Integer)ar1.get(0)</span></span><br><span class="line">Integer aar2=(Integer)ar2.get(<span class="number">1</span>);</span><br><span class="line"><span class="keyword">return</span> aar1.compareTo(aar2);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><strong>按键排序</strong>:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compare</span><span class="params">(Entry&lt;String,ArrayList&lt;Integer&gt;&gt; o1,Entry&lt;String,ArrayList&lt;Integer&gt;&gt; o2)</span></span>&#123;</span><br><span class="line">String s1=(String)o1.getKey();.getKey()获取键</span><br><span class="line">String s2=(String)o2.getKey(); </span><br><span class="line"><span class="keyword">return</span> s1.compareTo(s2);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><strong>(按键)倒序排序</strong> </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compare</span><span class="params">(Entry&lt;String,ArrayList&lt;Integer&gt;&gt; o1,Entry&lt;String,ArrayList&lt;Integer&gt;&gt; o2)</span></span>&#123;</span><br><span class="line">String s1=(String)o1.getKey();</span><br><span class="line">String s2=(String)o2.getKey(); </span><br><span class="line"><span class="keyword">return</span> s2.compareTo(s1);<span class="comment">//注意s1和s2的顺序</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p>上面每一种重写都包含了compareTo(),那么compareTo()方法是什么呢?</p><blockquote><p>compareTo<br>int compareTo(T o)<br>    比较此对象与指定对象的顺序。如果该对象小于、等于或大于指定对象，则分别返回负整数、零或正整数。<br>    实现类必须确保对于所有的 x 和 y 都存在 sgn(x.compareTo(y)) == -sgn(y.compareTo(x)) 的关系。（这意味着如果 y.compareTo(x) 抛出一个异常，则 x.compareTo(y) 也要抛出一个异常。）<br>    实现类还必须确保关系是可传递的：(x.compareTo(y)&gt;0 &amp;&amp; y.compareTo(z)&gt;0) 意味着 x.compareTo(z)&gt;0。<br>    最后，实现者必须确保 x.compareTo(y)==0 意味着对于所有的 z，都存在 sgn(x.compareTo(z)) == sgn(y.compareTo(z))。 强烈推荐 (x.compareTo(y)==0) == (x.equals(y)) 这种做法，但并不是 严格要求这样做。一般来说，任何实现 Comparable 接口和违背此条件的类都应该清楚地指出这一事实。推荐如此阐述：“注意：此类具有与 equals 不一致的自然排序。”<br>    在前面的描述中，符号 sgn(expression) 指定 signum 数学函数，该函数根据 expression 的值是负数、零还是正数，分别返回 -1、0 或 1 中的一个值。<br>    参数：<br>    o - 要比较的对象。<br>    返回：<br>    负整数、零或正整数，根据此对象是小于、等于还是大于指定对象。<br>    抛出：<br>    ClassCastException - 如果指定对象的类型不允许它与此对象进行比较。 </p></blockquote><h3 id="2-1-更简单的例子"><a href="#2-1-更简单的例子" class="headerlink" title="2.1 更简单的例子"></a>2.1 更简单的例子</h3><p>这个例子有些复杂,为了让这种排序法的思路更清晰,我们举以下例子:</p><blockquote><p>创建一个Map&lt;Character,Integer&gt;用以储存字母和其出现次数,对出现次数排序后输出这个Map.</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"><span class="keyword">import</span> java.util.Map.Entry;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test1</span></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">Map&lt;Character,Integer&gt; map=<span class="keyword">new</span> HashMap&lt;Character,Integer&gt;();</span><br><span class="line">Random rand=<span class="keyword">new</span> Random();</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">1000</span>;i++)&#123;</span><br><span class="line">Character x=(<span class="keyword">char</span>)(rand.nextInt(<span class="number">26</span>)+<span class="number">65</span>);</span><br><span class="line">Integer ints=map.get(x);</span><br><span class="line">map.put(x,ints==<span class="keyword">null</span>?<span class="number">1</span>:ints+<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(Character t:map.keySet())&#123;</span><br><span class="line">System.out.print(t+<span class="string">": "</span>+map.get(t)+<span class="string">" "</span>);</span><br><span class="line">&#125;</span><br><span class="line">System.out.println();</span><br><span class="line"><span class="comment">//排序</span></span><br><span class="line">List&lt;Map.Entry&lt;Character,Integer&gt;&gt; list=<span class="keyword">new</span> ArrayList&lt;Map.Entry&lt;Character,Integer&gt;&gt;(map.entrySet());<span class="comment">//第一步,创建一个List&lt;Map.Entry&lt;String,List&lt;Integer&gt;&gt;&gt;</span></span><br><span class="line">Collections.sort(list,<span class="keyword">new</span> Comparator&lt;Map.Entry&lt;Character,Integer&gt;&gt;()&#123;<span class="comment">//第二步,用Collections.sort()对list排序(重写其compare()方法)</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compare</span><span class="params">(Entry&lt;Character,Integer&gt; o1,Entry&lt;Character,Integer&gt; o2)</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> o1.getValue().compareTo(o2.getValue());</span><br><span class="line">&#125;</span><br><span class="line">&#125;);</span><br><span class="line">Map&lt;Character,Integer&gt; sortMap=<span class="keyword">new</span> LinkedHashMap&lt;Character,Integer&gt;();<span class="comment">//第三步,创建新的LinkedHashMap&lt;String,List&lt;Integer&gt;&gt;以储存排序后的Map</span></span><br><span class="line"><span class="keyword">for</span>(Map.Entry me:list)</span><br><span class="line">sortMap.put((Character)me.getKey(),(Integer)me.getValue());</span><br><span class="line"><span class="keyword">for</span>(Character t:sortMap.keySet())&#123;</span><br><span class="line">System.out.print(t+<span class="string">": "</span>+sortMap.get(t)+<span class="string">" "</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-2-对非基本类型排序"><a href="#2-2-对非基本类型排序" class="headerlink" title="2.2 对非基本类型排序"></a>2.2 对非基本类型排序</h3><p>compareTo()可以对基本类型进行比较进而实现排序,那么假如想对自定义类的对象进行排序该怎么办呢?一个可行的办法就是添加可以用来排序的指标,例子如下:</p><blockquote><p>自定义一个图书类,包含String域名字和作者,int域出版时间,float域价格.创建一系列图书对象添加到一个Map&lt;Integer,Book&gt;中,Integer表示图书的编号,依据图书各项属性排序并输出Map.</p></blockquote> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"><span class="keyword">import</span> java.util.Map.Entry;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Book</span></span>&#123;</span><br><span class="line"><span class="keyword">private</span> String name;</span><br><span class="line"><span class="keyword">private</span> String author;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> time;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">float</span> price;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Book</span><span class="params">(String n,String a,<span class="keyword">int</span> t,<span class="keyword">float</span> f)</span></span>&#123;</span><br><span class="line"><span class="keyword">this</span>.name=n;</span><br><span class="line"><span class="keyword">this</span>.author=a;</span><br><span class="line"><span class="keyword">this</span>.time=t;</span><br><span class="line"><span class="keyword">this</span>.price=f;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">sortName</span><span class="params">(List&lt;Map.Entry&lt;Integer,Book&gt;&gt; listk,Map&lt;Integer,Book&gt; maptest)</span></span>&#123;<span class="comment">//按书名排序</span></span><br><span class="line">Collections.sort(listk,<span class="keyword">new</span> Comparator&lt;Map.Entry&lt;Integer,Book&gt;&gt;()&#123;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compare</span><span class="params">(Entry&lt;Integer,Book&gt; o1,Entry&lt;Integer,Book&gt; o2)</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> (o1.getValue().name).compareTo(o2.getValue().name);</span><br><span class="line">&#125;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="keyword">for</span>(Map.Entry&lt;Integer,Book&gt; x:listk)</span><br><span class="line">maptest.put(x.getKey(),x.getValue());</span><br><span class="line">System.out.println(<span class="string">"按书名排序:"</span>);</span><br><span class="line"><span class="keyword">for</span>(Integer t:maptest.keySet())&#123;</span><br><span class="line">System.out.println(t+<span class="string">": "</span>+maptest.get(t).name+<span class="string">" "</span>+maptest.get(t).author+<span class="string">" "</span>+maptest.get(t).time+<span class="string">" "</span>+maptest.get(t).price);</span><br><span class="line">&#125;</span><br><span class="line">System.out.println();</span><br><span class="line">maptest.clear();</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">sortAuthor</span><span class="params">(List&lt;Map.Entry&lt;Integer,Book&gt;&gt; listk,Map&lt;Integer,Book&gt; maptest)</span></span>&#123;<span class="comment">//按作者排序</span></span><br><span class="line">Collections.sort(listk,<span class="keyword">new</span> Comparator&lt;Map.Entry&lt;Integer,Book&gt;&gt;()&#123;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compare</span><span class="params">(Entry&lt;Integer,Book&gt; o1,Entry&lt;Integer,Book&gt; o2)</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> (o1.getValue().author).compareTo(o2.getValue().author);</span><br><span class="line">&#125;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="keyword">for</span>(Map.Entry&lt;Integer,Book&gt; x:listk)</span><br><span class="line">maptest.put(x.getKey(),x.getValue());</span><br><span class="line">System.out.println(<span class="string">"按作者排序:"</span>);</span><br><span class="line"><span class="keyword">for</span>(Integer t:maptest.keySet())&#123;</span><br><span class="line">System.out.println(t+<span class="string">": "</span>+maptest.get(t).name+<span class="string">" "</span>+maptest.get(t).author+<span class="string">" "</span>+maptest.get(t).time+<span class="string">" "</span>+maptest.get(t).price);</span><br><span class="line">&#125;</span><br><span class="line">System.out.println();</span><br><span class="line">maptest.clear();</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">sortTime</span><span class="params">(List&lt;Map.Entry&lt;Integer,Book&gt;&gt; listk,Map&lt;Integer,Book&gt; maptest)</span></span>&#123;<span class="comment">//按出版时间排序</span></span><br><span class="line">Collections.sort(listk,<span class="keyword">new</span> Comparator&lt;Map.Entry&lt;Integer,Book&gt;&gt;()&#123;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compare</span><span class="params">(Entry&lt;Integer,Book&gt; o1,Entry&lt;Integer,Book&gt; o2)</span></span>&#123;<span class="comment">//int不能使用compareTo方法</span></span><br><span class="line">Integer i1=o1.getValue().time;</span><br><span class="line">Integer i2=o2.getValue().time;</span><br><span class="line"><span class="keyword">if</span>(i1&gt;i2)</span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(i1==i2)</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="keyword">for</span>(Map.Entry&lt;Integer,Book&gt; x:listk)</span><br><span class="line">maptest.put(x.getKey(),x.getValue());</span><br><span class="line">System.out.println(<span class="string">"按出版时间排序:"</span>);</span><br><span class="line"><span class="keyword">for</span>(Integer t:maptest.keySet())&#123;</span><br><span class="line">System.out.println(t+<span class="string">": "</span>+maptest.get(t).name+<span class="string">" "</span>+maptest.get(t).author+<span class="string">" "</span>+maptest.get(t).time+<span class="string">" "</span>+maptest.get(t).price);</span><br><span class="line">&#125;</span><br><span class="line">System.out.println();</span><br><span class="line">maptest.clear();</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">sortPrice</span><span class="params">(List&lt;Map.Entry&lt;Integer,Book&gt;&gt; listk,Map&lt;Integer,Book&gt; maptest)</span></span>&#123;<span class="comment">//按价格排序</span></span><br><span class="line">Collections.sort(listk,<span class="keyword">new</span> Comparator&lt;Map.Entry&lt;Integer,Book&gt;&gt;()&#123;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compare</span><span class="params">(Entry&lt;Integer,Book&gt; o1,Entry&lt;Integer,Book&gt; o2)</span></span>&#123;<span class="comment">//float不能使用compareTo方法</span></span><br><span class="line">Float i1=o1.getValue().price;</span><br><span class="line">Float i2=o2.getValue().price;</span><br><span class="line"><span class="keyword">if</span>(i1&gt;i2)</span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(i1==i2)</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="keyword">for</span>(Map.Entry&lt;Integer,Book&gt; x:listk)</span><br><span class="line">maptest.put(x.getKey(),x.getValue());</span><br><span class="line">System.out.println(<span class="string">"按价格排序:"</span>);</span><br><span class="line"><span class="keyword">for</span>(Integer t:maptest.keySet())&#123;</span><br><span class="line">System.out.println(t+<span class="string">": "</span>+maptest.get(t).name+<span class="string">" "</span>+maptest.get(t).author+<span class="string">" "</span>+maptest.get(t).time+<span class="string">" "</span>+maptest.get(t).price);</span><br><span class="line">&#125;</span><br><span class="line">System.out.println();</span><br><span class="line">maptest.clear();</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">Map&lt;Integer,Book&gt;map=<span class="keyword">new</span> HashMap&lt;Integer,Book&gt;();</span><br><span class="line">map.put(<span class="number">1</span>,<span class="keyword">new</span> Book(<span class="string">"Java编程思想"</span>,<span class="string">"Bruce"</span>,<span class="number">2007</span>,<span class="number">108f</span>));</span><br><span class="line">map.put(<span class="number">2</span>,<span class="keyword">new</span> Book(<span class="string">"H黄金时代"</span>,<span class="string">"W王小波"</span>,<span class="number">1994</span>,<span class="number">68.9f</span>));</span><br><span class="line">map.put(<span class="number">3</span>,<span class="keyword">new</span> Book(<span class="string">"D东方故事集"</span>,<span class="string">"Y尤瑟纳尔"</span>,<span class="number">2007</span>,<span class="number">29.9f</span>));</span><br><span class="line">map.put(<span class="number">4</span>,<span class="keyword">new</span> Book(<span class="string">"D动物庄园"</span>,<span class="string">"Q乔治奥威尔"</span>,<span class="number">1945</span>,<span class="number">50f</span>));</span><br><span class="line">map.put(<span class="number">5</span>,<span class="keyword">new</span> Book(<span class="string">"C茶花女"</span>,<span class="string">"X小仲马"</span>,<span class="number">1848</span>,<span class="number">30f</span>));</span><br><span class="line">System.out.println(<span class="string">"原始顺序:"</span>);</span><br><span class="line"><span class="keyword">for</span>(Integer t:map.keySet())&#123;</span><br><span class="line">System.out.println(t+<span class="string">": "</span>+map.get(t).name+<span class="string">" "</span>+map.get(t).author+<span class="string">" "</span>+map.get(t).time+<span class="string">" "</span>+map.get(t).price);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//排序</span></span><br><span class="line">List&lt;Map.Entry&lt;Integer,Book&gt;&gt; list1=<span class="keyword">new</span> ArrayList&lt;Map.Entry&lt;Integer,Book&gt;&gt;(map.entrySet());</span><br><span class="line">Map&lt;Integer,Book&gt; sortMap=<span class="keyword">new</span> LinkedHashMap&lt;Integer,Book&gt;();</span><br><span class="line">sortName(list1,sortMap);</span><br><span class="line">sortAuthor(list1,sortMap);</span><br><span class="line">sortTime(list1,sortMap);</span><br><span class="line">sortPrice(list1,sortMap);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-其他排序法"><a href="#3-其他排序法" class="headerlink" title="3. 其他排序法"></a>3. 其他排序法</h3><p>对于这个题，在了解到Map.Entry类和对值排序方法之前，我解题思路是这样的：</p><blockquote><p>原来的Map是Map&lt;String,List&lt;Integer&gt;&gt;,名为map。<br>第一步：新建一个TreeMap&lt;Integer,String&gt;名为map1，利用TreeMap的排序来实现排序。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Map&lt;Integer,String&gt; map1=<span class="keyword">new</span> TreeMap&lt;Integer,String&gt;();</span><br><span class="line"><span class="keyword">for</span>(String s:map.keySet())</span><br><span class="line">map1.put(map.get(s).get(<span class="number">0</span>),s);</span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p>第二步：创建一个LinkedHashMap&lt;String,List&lt;Integer&gt;&gt; sortMap（可按输入顺序输出Map)存储排好序的Map。</p></blockquote><pre><code>Map&lt;String,List&lt;Integer&gt;&gt; sortMap=new LinkedHashMap&lt;String,List&lt;Integer&gt;&gt;;for(Integer i:map1.keySet())    sortMap.put(map1.get(i),map.get(map1.get(i)));</code></pre><p>完整代码如下：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> net.mindview.util.*;</span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"><span class="keyword">import</span> java.util.TreeMap;</span><br><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BackEx1126</span></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">Map&lt;String,ArrayList&lt;Integer&gt;&gt; map=<span class="keyword">new</span> LinkedHashMap&lt;String,ArrayList&lt;Integer&gt;&gt;();</span><br><span class="line">List&lt;String&gt; list=<span class="keyword">new</span> ArrayList&lt;String&gt;(<span class="keyword">new</span> TextFile(<span class="string">"SetOperations.java"</span>,<span class="string">"\\W+"</span>));</span><br><span class="line">Set&lt;String&gt; set=<span class="keyword">new</span> TreeSet&lt;String&gt;(list);</span><br><span class="line"><span class="keyword">for</span>(String x:set)&#123;</span><br><span class="line">ArrayList&lt;Integer&gt;ar=<span class="keyword">new</span> ArrayList&lt;Integer&gt;();</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;list.size();i++)&#123;</span><br><span class="line"><span class="keyword">if</span>(x.equals(list.get(i)))&#123;</span><br><span class="line">ar.add(i);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">map.put(x,ar);</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(<span class="string">"map: "</span>+map);</span><br><span class="line">System.out.println();</span><br><span class="line"></span><br><span class="line">TreeMap&lt;Integer,String&gt; map1=<span class="keyword">new</span> TreeMap&lt;Integer,String&gt;();</span><br><span class="line"><span class="keyword">for</span>(String s:map.keySet())</span><br><span class="line">map1.put((Integer)map.get(s).get(<span class="number">0</span>),s);</span><br><span class="line">Map&lt;String,List&lt;Integer&gt;&gt; sortMap=<span class="keyword">new</span> LinkedHashMap&lt;String,List&lt;Integer&gt;&gt;();</span><br><span class="line"><span class="keyword">for</span>(Integer i:map1.keySet())</span><br><span class="line">sortMap.put(map1.get(i),map.get(map1.get(i)));</span><br><span class="line">System.out.println(<span class="string">"排序后:"</span>);</span><br><span class="line">System.out.println(<span class="string">"sortMap: "</span>+sortMap);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>整个过程新建两个Map（一个TreeMap用于排序，一个LinkedHashMap用于按输入顺序输出）。遍历Map两次。<br>这种方法能用的前提就是Map里每个键对应的值的第一项都不一样。只要有两个键对应值的第一项一样，那么在第一步创建TreeMap&lt;Integer,String&gt;map1后，向其添加元素的时候必然有键值对被覆盖，最后复原成LinkedHashMap&lt;String,List&lt;Integer&gt;也就会出问题。<script src="https://cdnjs.cloudflare.com/ajax/libs/raphael/2.2.7/raphael.min.js"></script><script src="https://cdnjs.cloudflare.com/ajax/libs/flowchart/1.6.5/flowchart.min.js"></script><textarea id="flowchart-0-code" style="display: none">graph LR    创建List<Map.Entry>(把“对Map排序”转化为“对Collection排序”) --> 重写Comparator中的compare()（实现个性化排序方式);    重写Comparator中的compare()（实现个性化排序方式) --> 创建LinkedListMap（储存排好序的Map);</textarea><textarea id="flowchart-0-options" style="display: none">{"scale":1,"line-width":2,"line-length":50,"text-margin":10,"font-size":12}</textarea><script>  var code = document.getElementById("flowchart-0-code").value;  var options = JSON.parse(decodeURIComponent(document.getElementById("flowchart-0-options").value));  var diagram = flowchart.parse(code);  diagram.drawSVG("flowchart-0", options);</script></p>]]></content>
      
      
    </entry>
    
    <entry>
      <title>hello world</title>
      <link href="/2018/08/01/hello-world/"/>
      <url>/2018/08/01/hello-world/</url>
      <content type="html"><![CDATA[]]></content>
      
      
    </entry>
    
  
  
</search>
